9,17c9,10
< beta-reduce: ((((((\x.\y.\z.((((x)@(z)))@(((y)@(z)))))@(\x.\y.x)))@(\x.x)))@(\x.x)) =>
< ((((\y.\z.((((\x.\y.x)@(z)))@(((y)@(z)))))@(\x.x)))@(\x.x)) =>
< ((\z.((((\x.\y.x)@(z)))@(((\x.x)@(z)))))@(\x.x)) =>
< ((((\x.\y.x)@(\x.x)))@(((\x.x)@(\x.x)))) =>
< ((\y.\x.x)@(((\x.x)@(\x.x)))) =>
< \x.x
< beta-reduce: ((((\x.\y.x)@(\x.x)))@(\x.x)) =>
< ((\y.\x.x)@(\x.x)) =>
< \x.x
---
> beta-reduce: ((((((\x.\y.\z.((((x)@(z)))@(((y)@(z)))))@(\x.\y.x)))@(\x.x)))@(\x.x))
> beta-reduce: ((((\x.\y.x)@(\x.x)))@(\x.x))
42,53d34
< class Closure1 inherits Closure {
<   apply(y : EvalObject) : EvalObject {
<     { out_string("Applying closure 1\n");
<       x <- y;
< get_x();}};
< };
< class Closure0 inherits Closure {
<   apply(y : EvalObject) : EvalObject {
<     { out_string("Applying closure 0\n");
<       x <- y;
< get_x();}};
< };
89,145d69
< class Closure3 inherits Closure {
<   apply(y : EvalObject) : EvalObject {
<     { out_string("Applying closure 3\n");
<       x <- y;
< get_x();}};
< };
< class Closure2 inherits Closure {
<   apply(y : EvalObject) : EvalObject {
<     { out_string("Applying closure 2\n");
<       x <- y;
< get_x();}};
< };
< class Closure1 inherits Closure {
<   apply(y : EvalObject) : EvalObject {
<     { out_string("Applying closure 1\n");
<       x <- y;
< ((new Closure4).init(self));}};
< };
< class Closure4 inherits Closure {
<   apply(y : EvalObject) : EvalObject {
<     { out_string("Applying closure 4\n");
<       x <- y;
< get_parent().get_x();}};
< };
< class Closure0 inherits Closure {
<   apply(y : EvalObject) : EvalObject {
<     { out_string("Applying closure 0\n");
<       x <- y;
< ((new Closure5).init(self));}};
< };
< class Closure5 inherits Closure {
<   apply(y : EvalObject) : EvalObject {
<     { out_string("Applying closure 5\n");
<       x <- y;
< ((new Closure6).init(self));}};
< };
< class Closure6 inherits Closure {
<   apply(y : EvalObject) : EvalObject {
<     { out_string("Applying closure 6\n");
<       x <- y;
< (let x : EvalObject <- (let x : EvalObject <- get_parent().get_parent().get_x(),
<      y : EvalObject <- get_x() in
<   case x of
<     c : Closure => c.apply(y);
<     o : Object => { abort(); new EvalObject; };
<   esac),
<      y : EvalObject <- (let x : EvalObject <- get_parent().get_x(),
<      y : EvalObject <- get_x() in
<   case x of
<     c : Closure => c.apply(y);
<     o : Object => { abort(); new EvalObject; };
<   esac) in
<   case x of
<     c : Closure => c.apply(y);
<     o : Object => { abort(); new EvalObject; };
<   esac);}};
< };
206,358d129
< class Closure8 inherits Closure {
<   apply(y : EvalObject) : EvalObject {
<     { out_string("Applying closure 8\n");
<       x <- y;
< get_x();}};
< };
< class Closure7 inherits Closure {
<   apply(y : EvalObject) : EvalObject {
<     { out_string("Applying closure 7\n");
<       x <- y;
< ((new Closure9).init(self));}};
< };
< class Closure9 inherits Closure {
<   apply(y : EvalObject) : EvalObject {
<     { out_string("Applying closure 9\n");
<       x <- y;
< get_parent().get_x();}};
< };
< class Closure6 inherits Closure {
<   apply(y : EvalObject) : EvalObject {
<     { out_string("Applying closure 6\n");
<       x <- y;
< get_x();}};
< };
< class Closure5 inherits Closure {
<   apply(y : EvalObject) : EvalObject {
<     { out_string("Applying closure 5\n");
<       x <- y;
< ((new Closure10).init(self));}};
< };
< class Closure10 inherits Closure {
<   apply(y : EvalObject) : EvalObject {
<     { out_string("Applying closure 10\n");
<       x <- y;
< ((new Closure11).init(self));}};
< };
< class Closure11 inherits Closure {
<   apply(y : EvalObject) : EvalObject {
<     { out_string("Applying closure 11\n");
<       x <- y;
< (let x : EvalObject <- (let x : EvalObject <- get_parent().get_parent().get_x(),
<      y : EvalObject <- get_x() in
<   case x of
<     c : Closure => c.apply(y);
<     o : Object => { abort(); new EvalObject; };
<   esac),
<      y : EvalObject <- (let x : EvalObject <- get_parent().get_x(),
<      y : EvalObject <- get_x() in
<   case x of
<     c : Closure => c.apply(y);
<     o : Object => { abort(); new EvalObject; };
<   esac) in
<   case x of
<     c : Closure => c.apply(y);
<     o : Object => { abort(); new EvalObject; };
<   esac);}};
< };
< class Closure4 inherits Closure {
<   apply(y : EvalObject) : EvalObject {
<     { out_string("Applying closure 4\n");
<       x <- y;
< ((new Closure12).init(self));}};
< };
< class Closure12 inherits Closure {
<   apply(y : EvalObject) : EvalObject {
<     { out_string("Applying closure 12\n");
<       x <- y;
< get_parent().get_x();}};
< };
< class Closure3 inherits Closure {
<   apply(y : EvalObject) : EvalObject {
<     { out_string("Applying closure 3\n");
<       x <- y;
< ((new Closure13).init(self));}};
< };
< class Closure13 inherits Closure {
<   apply(y : EvalObject) : EvalObject {
<     { out_string("Applying closure 13\n");
<       x <- y;
< ((new Closure14).init(self));}};
< };
< class Closure14 inherits Closure {
<   apply(y : EvalObject) : EvalObject {
<     { out_string("Applying closure 14\n");
<       x <- y;
< (let x : EvalObject <- (let x : EvalObject <- get_parent().get_parent().get_x(),
<      y : EvalObject <- get_x() in
<   case x of
<     c : Closure => c.apply(y);
<     o : Object => { abort(); new EvalObject; };
<   esac),
<      y : EvalObject <- (let x : EvalObject <- get_parent().get_x(),
<      y : EvalObject <- get_x() in
<   case x of
<     c : Closure => c.apply(y);
<     o : Object => { abort(); new EvalObject; };
<   esac) in
<   case x of
<     c : Closure => c.apply(y);
<     o : Object => { abort(); new EvalObject; };
<   esac);}};
< };
< class Closure2 inherits Closure {
<   apply(y : EvalObject) : EvalObject {
<     { out_string("Applying closure 2\n");
<       x <- y;
< ((new Closure15).init(self));}};
< };
< class Closure15 inherits Closure {
<   apply(y : EvalObject) : EvalObject {
<     { out_string("Applying closure 15\n");
<       x <- y;
< ((new Closure16).init(self));}};
< };
< class Closure16 inherits Closure {
<   apply(y : EvalObject) : EvalObject {
<     { out_string("Applying closure 16\n");
<       x <- y;
< (let x : EvalObject <- (let x : EvalObject <- get_parent().get_parent().get_x(),
<      y : EvalObject <- get_x() in
<   case x of
<     c : Closure => c.apply(y);
<     o : Object => { abort(); new EvalObject; };
<   esac),
<      y : EvalObject <- (let x : EvalObject <- get_parent().get_x(),
<      y : EvalObject <- get_x() in
<   case x of
<     c : Closure => c.apply(y);
<     o : Object => { abort(); new EvalObject; };
<   esac) in
<   case x of
<     c : Closure => c.apply(y);
<     o : Object => { abort(); new EvalObject; };
<   esac);}};
< };
< class Closure1 inherits Closure {
<   apply(y : EvalObject) : EvalObject {
<     { out_string("Applying closure 1\n");
<       x <- y;
< ((new Closure17).init(self));}};
< };
< class Closure17 inherits Closure {
<   apply(y : EvalObject) : EvalObject {
<     { out_string("Applying closure 17\n");
<       x <- y;
< get_parent().get_x();}};
< };
< class Closure0 inherits Closure {
<   apply(y : EvalObject) : EvalObject {
<     { out_string("Applying closure 0\n");
<       x <- y;
< get_x();}};
< };
403,531d173
< };
< class Closure5 inherits Closure {
<   apply(y : EvalObject) : EvalObject {
<     { out_string("Applying closure 5\n");
<       x <- y;
< ((new Closure6).init(self));}};
< };
< class Closure6 inherits Closure {
<   apply(y : EvalObject) : EvalObject {
<     { out_string("Applying closure 6\n");
<       x <- y;
< ((new Closure7).init(self));}};
< };
< class Closure7 inherits Closure {
<   apply(y : EvalObject) : EvalObject {
<     { out_string("Applying closure 7\n");
<       x <- y;
< (let x : EvalObject <- (let x : EvalObject <- get_parent().get_parent().get_x(),
<      y : EvalObject <- get_x() in
<   case x of
<     c : Closure => c.apply(y);
<     o : Object => { abort(); new EvalObject; };
<   esac),
<      y : EvalObject <- (let x : EvalObject <- get_parent().get_x(),
<      y : EvalObject <- get_x() in
<   case x of
<     c : Closure => c.apply(y);
<     o : Object => { abort(); new EvalObject; };
<   esac) in
<   case x of
<     c : Closure => c.apply(y);
<     o : Object => { abort(); new EvalObject; };
<   esac);}};
< };
< class Closure4 inherits Closure {
<   apply(y : EvalObject) : EvalObject {
<     { out_string("Applying closure 4\n");
<       x <- y;
< ((new Closure8).init(self));}};
< };
< class Closure8 inherits Closure {
<   apply(y : EvalObject) : EvalObject {
<     { out_string("Applying closure 8\n");
<       x <- y;
< ((new Closure9).init(self));}};
< };
< class Closure9 inherits Closure {
<   apply(y : EvalObject) : EvalObject {
<     { out_string("Applying closure 9\n");
<       x <- y;
< (let x : EvalObject <- (let x : EvalObject <- get_parent().get_parent().get_x(),
<      y : EvalObject <- get_x() in
<   case x of
<     c : Closure => c.apply(y);
<     o : Object => { abort(); new EvalObject; };
<   esac),
<      y : EvalObject <- (let x : EvalObject <- get_parent().get_x(),
<      y : EvalObject <- get_x() in
<   case x of
<     c : Closure => c.apply(y);
<     o : Object => { abort(); new EvalObject; };
<   esac) in
<   case x of
<     c : Closure => c.apply(y);
<     o : Object => { abort(); new EvalObject; };
<   esac);}};
< };
< class Closure3 inherits Closure {
<   apply(y : EvalObject) : EvalObject {
<     { out_string("Applying closure 3\n");
<       x <- y;
< ((new Closure10).init(self));}};
< };
< class Closure10 inherits Closure {
<   apply(y : EvalObject) : EvalObject {
<     { out_string("Applying closure 10\n");
<       x <- y;
< get_parent().get_x();}};
< };
< class Closure2 inherits Closure {
<   apply(y : EvalObject) : EvalObject {
<     { out_string("Applying closure 2\n");
<       x <- y;
< ((new Closure11).init(self));}};
< };
< class Closure11 inherits Closure {
<   apply(y : EvalObject) : EvalObject {
<     { out_string("Applying closure 11\n");
<       x <- y;
< ((new Closure12).init(self));}};
< };
< class Closure12 inherits Closure {
<   apply(y : EvalObject) : EvalObject {
<     { out_string("Applying closure 12\n");
<       x <- y;
< (let x : EvalObject <- (let x : EvalObject <- get_parent().get_parent().get_x(),
<      y : EvalObject <- get_x() in
<   case x of
<     c : Closure => c.apply(y);
<     o : Object => { abort(); new EvalObject; };
<   esac),
<      y : EvalObject <- (let x : EvalObject <- get_parent().get_x(),
<      y : EvalObject <- get_x() in
<   case x of
<     c : Closure => c.apply(y);
<     o : Object => { abort(); new EvalObject; };
<   esac) in
<   case x of
<     c : Closure => c.apply(y);
<     o : Object => { abort(); new EvalObject; };
<   esac);}};
< };
< class Closure1 inherits Closure {
<   apply(y : EvalObject) : EvalObject {
<     { out_string("Applying closure 1\n");
<       x <- y;
< ((new Closure13).init(self));}};
< };
< class Closure13 inherits Closure {
<   apply(y : EvalObject) : EvalObject {
<     { out_string("Applying closure 13\n");
<       x <- y;
< get_parent().get_x();}};
< };
< class Closure0 inherits Closure {
<   apply(y : EvalObject) : EvalObject {
<     { out_string("Applying closure 0\n");
<       x <- y;
< get_x();}};
