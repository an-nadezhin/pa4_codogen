# start of generated code
# coding global data
	.data
	.align	2
	.globl	class_nameTab
	.globl	Main_protObj
	.globl	Int_protObj
	.globl	String_protObj
	.globl	bool_const0
	.globl	bool_const1
	.globl	_int_tag
	.globl	_bool_tag
	.globl	_string_tag
_int_tag:
	.word	2
_bool_tag:
	.word	3
_string_tag:
	.word	4
# choosing GC
	.globl	_MemMgr_INITIALIZER
_MemMgr_INITIALIZER:
	.word	_GenGC_Init
	.globl	_MemMgr_COLLECTOR
_MemMgr_COLLECTOR:
	.word	_GenGC_Collect
	.globl	_MemMgr_TEST
_MemMgr_TEST:
	.word	0
	.word	-1
str_const75:
	.word	4
	.word	5
	.word	String_dispTab
	.word	int_const1
	.byte	0	
	.align	2
	.word	-1
str_const74:
	.word	4
	.word	6
	.word	String_dispTab
	.word	int_const2
	.ascii	"Main"
	.byte	0	
	.align	2
	.word	-1
str_const73:
	.word	4
	.word	6
	.word	String_dispTab
	.word	int_const2
	.ascii	"Term"
	.byte	0	
	.align	2
	.word	-1
str_const72:
	.word	4
	.word	5
	.word	String_dispTab
	.word	int_const3
	.ascii	"App"
	.byte	0	
	.align	2
	.word	-1
str_const71:
	.word	4
	.word	6
	.word	String_dispTab
	.word	int_const4
	.ascii	"Lambda"
	.byte	0	
	.align	2
	.word	-1
str_const70:
	.word	4
	.word	7
	.word	String_dispTab
	.word	int_const5
	.ascii	"Variable"
	.byte	0	
	.align	2
	.word	-1
str_const69:
	.word	4
	.word	6
	.word	String_dispTab
	.word	int_const2
	.ascii	"Expr"
	.byte	0	
	.align	2
	.word	-1
str_const68:
	.word	4
	.word	8
	.word	String_dispTab
	.word	int_const6
	.ascii	"LambdaListRef"
	.byte	0	
	.align	2
	.word	-1
str_const67:
	.word	4
	.word	8
	.word	String_dispTab
	.word	int_const7
	.ascii	"LambdaListNE"
	.byte	0	
	.align	2
	.word	-1
str_const66:
	.word	4
	.word	7
	.word	String_dispTab
	.word	int_const8
	.ascii	"LambdaList"
	.byte	0	
	.align	2
	.word	-1
str_const65:
	.word	4
	.word	7
	.word	String_dispTab
	.word	int_const9
	.ascii	"VarListNE"
	.byte	0	
	.align	2
	.word	-1
str_const64:
	.word	4
	.word	6
	.word	String_dispTab
	.word	int_const10
	.ascii	"VarList"
	.byte	0	
	.align	2
	.word	-1
str_const63:
	.word	4
	.word	6
	.word	String_dispTab
	.word	int_const4
	.ascii	"String"
	.byte	0	
	.align	2
	.word	-1
str_const62:
	.word	4
	.word	6
	.word	String_dispTab
	.word	int_const2
	.ascii	"Bool"
	.byte	0	
	.align	2
	.word	-1
str_const61:
	.word	4
	.word	5
	.word	String_dispTab
	.word	int_const3
	.ascii	"Int"
	.byte	0	
	.align	2
	.word	-1
str_const60:
	.word	4
	.word	5
	.word	String_dispTab
	.word	int_const11
	.ascii	"IO"
	.byte	0	
	.align	2
	.word	-1
str_const59:
	.word	4
	.word	6
	.word	String_dispTab
	.word	int_const4
	.ascii	"Object"
	.byte	0	
	.align	2
	.word	-1
str_const58:
	.word	4
	.word	7
	.word	String_dispTab
	.word	int_const8
	.ascii	"_prim_slot"
	.byte	0	
	.align	2
	.word	-1
str_const57:
	.word	4
	.word	7
	.word	String_dispTab
	.word	int_const9
	.ascii	"SELF_TYPE"
	.byte	0	
	.align	2
	.word	-1
str_const56:
	.word	4
	.word	7
	.word	String_dispTab
	.word	int_const9
	.ascii	"_no_class"
	.byte	0	
	.align	2
	.word	-1
str_const55:
	.word	4
	.word	8
	.word	String_dispTab
	.word	int_const6
	.ascii	"<basic class>"
	.byte	0	
	.align	2
	.word	-1
str_const54:
	.word	4
	.word	6
	.word	String_dispTab
	.word	int_const10
	.ascii	"\n};\n};\n"
	.byte	0	
	.align	2
	.word	-1
str_const53:
	.word	4
	.word	11
	.word	String_dispTab
	.word	int_const12
	.ascii	"  main() : EvalObject {\n"
	.byte	0	
	.align	2
	.word	-1
str_const52:
	.word	4
	.word	8
	.word	String_dispTab
	.word	int_const6
	.ascii	"class Main {\n"
	.byte	0	
	.align	2
	.word	-1
str_const51:
	.word	4
	.word	17
	.word	String_dispTab
	.word	int_const13
	.ascii	"(*Generated by lam.cl (Jeff Foster, March 2000)*)\n"
	.byte	0	
	.align	2
	.word	-1
str_const50:
	.word	4
	.word	16
	.word	String_dispTab
	.word	int_const14
	.ascii	"\n------------------cut here------------------\n"
	.byte	0	
	.align	2
	.word	-1
str_const49:
	.word	4
	.word	10
	.word	String_dispTab
	.word	int_const15
	.ascii	"Generating code for "
	.byte	0	
	.align	2
	.word	-1
str_const48:
	.word	4
	.word	20
	.word	String_dispTab
	.word	int_const16
	.ascii	"  apply(y : EvalObject) : EvalObject { { abort(); self; } };\n"
	.byte	0	
	.align	2
	.word	-1
str_const47:
	.word	4
	.word	19
	.word	String_dispTab
	.word	int_const17
	.ascii	"  init(p : Closure) : Closure {{ parent <- p; self; }};\n"
	.byte	0	
	.align	2
	.word	-1
str_const46:
	.word	4
	.word	12
	.word	String_dispTab
	.word	int_const18
	.ascii	"  get_x() : EvalObject { x };\n"
	.byte	0	
	.align	2
	.word	-1
str_const45:
	.word	4
	.word	14
	.word	String_dispTab
	.word	int_const19
	.ascii	"  get_parent() : Closure { parent };\n"
	.byte	0	
	.align	2
	.word	-1
str_const44:
	.word	4
	.word	9
	.word	String_dispTab
	.word	int_const20
	.ascii	"  x : EvalObject;\n"
	.byte	0	
	.align	2
	.word	-1
str_const43:
	.word	4
	.word	10
	.word	String_dispTab
	.word	int_const15
	.ascii	"  parent : Closure;\n"
	.byte	0	
	.align	2
	.word	-1
str_const42:
	.word	4
	.word	14
	.word	String_dispTab
	.word	int_const21
	.ascii	"class Closure inherits EvalObject {\n"
	.byte	0	
	.align	2
	.word	-1
str_const41:
	.word	4
	.word	16
	.word	String_dispTab
	.word	int_const14
	.ascii	"  eval() : EvalObject { { abort(); self; } };\n"
	.byte	0	
	.align	2
	.word	-1
str_const40:
	.word	4
	.word	12
	.word	String_dispTab
	.word	int_const22
	.ascii	"class EvalObject inherits IO {\n"
	.byte	0	
	.align	2
	.word	-1
str_const39:
	.word	4
	.word	6
	.word	String_dispTab
	.word	int_const2
	.ascii	" =>\n"
	.byte	0	
	.align	2
	.word	-1
str_const38:
	.word	4
	.word	8
	.word	String_dispTab
	.word	int_const6
	.ascii	"beta-reduce: "
	.byte	0	
	.align	2
	.word	-1
str_const37:
	.word	4
	.word	5
	.word	String_dispTab
	.word	int_const0
	.ascii	"z"
	.byte	0	
	.align	2
	.word	-1
str_const36:
	.word	4
	.word	5
	.word	String_dispTab
	.word	int_const0
	.ascii	"y"
	.byte	0	
	.align	2
	.word	-1
str_const35:
	.word	4
	.word	5
	.word	String_dispTab
	.word	int_const0
	.ascii	"x"
	.byte	0	
	.align	2
	.word	-1
str_const34:
	.word	4
	.word	6
	.word	String_dispTab
	.word	int_const10
	.ascii	"  esac)"
	.byte	0	
	.align	2
	.word	-1
str_const33:
	.word	4
	.word	17
	.word	String_dispTab
	.word	int_const23
	.ascii	"    o : Object => { abort(); new EvalObject; };\n"
	.byte	0	
	.align	2
	.word	-1
str_const32:
	.word	4
	.word	12
	.word	String_dispTab
	.word	int_const22
	.ascii	"    c : Closure => c.apply(y);\n"
	.byte	0	
	.align	2
	.word	-1
str_const31:
	.word	4
	.word	8
	.word	String_dispTab
	.word	int_const7
	.ascii	"  case x of\n"
	.byte	0	
	.align	2
	.word	-1
str_const30:
	.word	4
	.word	6
	.word	String_dispTab
	.word	int_const2
	.ascii	" in\n"
	.byte	0	
	.align	2
	.word	-1
str_const29:
	.word	4
	.word	10
	.word	String_dispTab
	.word	int_const24
	.ascii	"     y : EvalObject <- "
	.byte	0	
	.align	2
	.word	-1
str_const28:
	.word	4
	.word	5
	.word	String_dispTab
	.word	int_const11
	.ascii	",\n"
	.byte	0	
	.align	2
	.word	-1
str_const27:
	.word	4
	.word	10
	.word	String_dispTab
	.word	int_const24
	.ascii	"(let x : EvalObject <- "
	.byte	0	
	.align	2
	.word	-1
str_const26:
	.word	4
	.word	5
	.word	String_dispTab
	.word	int_const11
	.ascii	"))"
	.byte	0	
	.align	2
	.word	-1
str_const25:
	.word	4
	.word	5
	.word	String_dispTab
	.word	int_const3
	.ascii	")@("
	.byte	0	
	.align	2
	.word	-1
str_const24:
	.word	4
	.word	5
	.word	String_dispTab
	.word	int_const11
	.ascii	"(("
	.byte	0	
	.align	2
	.word	-1
str_const23:
	.word	4
	.word	5
	.word	String_dispTab
	.word	int_const3
	.ascii	"};\n"
	.byte	0	
	.align	2
	.word	-1
str_const22:
	.word	4
	.word	6
	.word	String_dispTab
	.word	int_const25
	.ascii	";}};\n"
	.byte	0	
	.align	2
	.word	-1
str_const21:
	.word	4
	.word	8
	.word	String_dispTab
	.word	int_const26
	.ascii	"      x <- y;\n"
	.byte	0	
	.align	2
	.word	-1
str_const20:
	.word	4
	.word	6
	.word	String_dispTab
	.word	int_const4
	.byte	92
	.ascii	"n\");\n"
	.byte	0	
	.align	2
	.word	-1
str_const19:
	.word	4
	.word	13
	.word	String_dispTab
	.word	int_const27
	.ascii	"    { out_string(\"Applying closure "
	.byte	0	
	.align	2
	.word	-1
str_const18:
	.word	4
	.word	14
	.word	String_dispTab
	.word	int_const28
	.ascii	"  apply(y : EvalObject) : EvalObject {\n"
	.byte	0	
	.align	2
	.word	-1
str_const17:
	.word	4
	.word	10
	.word	String_dispTab
	.word	int_const15
	.ascii	" inherits Closure {\n"
	.byte	0	
	.align	2
	.word	-1
str_const16:
	.word	4
	.word	8
	.word	String_dispTab
	.word	int_const6
	.ascii	"class Closure"
	.byte	0	
	.align	2
	.word	-1
str_const15:
	.word	4
	.word	6
	.word	String_dispTab
	.word	int_const4
	.ascii	"self))"
	.byte	0	
	.align	2
	.word	-1
str_const14:
	.word	4
	.word	8
	.word	String_dispTab
	.word	int_const6
	.ascii	"new Closure))"
	.byte	0	
	.align	2
	.word	-1
str_const13:
	.word	4
	.word	6
	.word	String_dispTab
	.word	int_const10
	.ascii	").init("
	.byte	0	
	.align	2
	.word	-1
str_const12:
	.word	4
	.word	8
	.word	String_dispTab
	.word	int_const6
	.ascii	"((new Closure"
	.byte	0	
	.align	2
	.word	-1
str_const11:
	.word	4
	.word	5
	.word	String_dispTab
	.word	int_const0
	.ascii	"."
	.byte	0	
	.align	2
	.word	-1
str_const10:
	.word	4
	.word	5
	.word	String_dispTab
	.word	int_const0
	.byte	92
	.byte	0	
	.align	2
	.word	-1
str_const9:
	.word	4
	.word	6
	.word	String_dispTab
	.word	int_const10
	.ascii	"get_x()"
	.byte	0	
	.align	2
	.word	-1
str_const8:
	.word	4
	.word	11
	.word	String_dispTab
	.word	int_const29
	.ascii	"Error:  free occurrence of "
	.byte	0	
	.align	2
	.word	-1
str_const7:
	.word	4
	.word	8
	.word	String_dispTab
	.word	int_const6
	.ascii	"get_parent()."
	.byte	0	
	.align	2
	.word	-1
str_const6:
	.word	4
	.word	16
	.word	String_dispTab
	.word	int_const30
	.ascii	"\nError: Expr is pure virtual; can't gen_code\n"
	.byte	0	
	.align	2
	.word	-1
str_const5:
	.word	4
	.word	16
	.word	String_dispTab
	.word	int_const31
	.ascii	"\nError: Expr is pure virtual; can't substitute\n"
	.byte	0	
	.align	2
	.word	-1
str_const4:
	.word	4
	.word	17
	.word	String_dispTab
	.word	int_const23
	.ascii	"\nError: Expr is pure virtual; can't beta-reduce\n"
	.byte	0	
	.align	2
	.word	-1
str_const3:
	.word	4
	.word	16
	.word	String_dispTab
	.word	int_const31
	.ascii	"\nError: Expr is pure virtual; can't print self\n"
	.byte	0	
	.align	2
	.word	-1
str_const2:
	.word	4
	.word	5
	.word	String_dispTab
	.word	int_const0
	.ascii	" "
	.byte	0	
	.align	2
	.word	-1
str_const1:
	.word	4
	.word	5
	.word	String_dispTab
	.word	int_const0
	.ascii	"\n"
	.byte	0	
	.align	2
	.word	-1
str_const0:
	.word	4
	.word	7
	.word	String_dispTab
	.word	int_const32
	.ascii	"./lam-gc.cl"
	.byte	0	
	.align	2
	.word	-1
int_const32:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	11
	.word	-1
int_const31:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	47
	.word	-1
int_const30:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	45
	.word	-1
int_const29:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	27
	.word	-1
int_const28:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	39
	.word	-1
int_const27:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	35
	.word	-1
int_const26:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	14
	.word	-1
int_const25:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	5
	.word	-1
int_const24:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	23
	.word	-1
int_const23:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	48
	.word	-1
int_const22:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	31
	.word	-1
int_const21:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	36
	.word	-1
int_const20:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	18
	.word	-1
int_const19:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	37
	.word	-1
int_const18:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	30
	.word	-1
int_const17:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	56
	.word	-1
int_const16:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	61
	.word	-1
int_const15:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	20
	.word	-1
int_const14:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	46
	.word	-1
int_const13:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	50
	.word	-1
int_const12:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	24
	.word	-1
int_const11:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	2
	.word	-1
int_const10:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	7
	.word	-1
int_const9:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	9
	.word	-1
int_const8:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	10
	.word	-1
int_const7:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	12
	.word	-1
int_const6:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	13
	.word	-1
int_const5:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	8
	.word	-1
int_const4:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	6
	.word	-1
int_const3:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	3
	.word	-1
int_const2:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	4
	.word	-1
int_const1:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	0
	.word	-1
int_const0:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	1
	.word	-1
bool_const0:
	.word	3
	.word	4
	.word	Bool_dispTab
	.word	0
	.word	-1
bool_const1:
	.word	3
	.word	4
	.word	Bool_dispTab
	.word	1
class_nameTab:
	.word	str_const59
	.word	str_const60
	.word	str_const61
	.word	str_const62
	.word	str_const63
	.word	str_const64
	.word	str_const65
	.word	str_const66
	.word	str_const67
	.word	str_const68
	.word	str_const69
	.word	str_const70
	.word	str_const71
	.word	str_const72
	.word	str_const73
	.word	str_const74
class_objTab:
	.word	Object_protObj
	.word	Object_init
	.word	IO_protObj
	.word	IO_init
	.word	Int_protObj
	.word	Int_init
	.word	Bool_protObj
	.word	Bool_init
	.word	String_protObj
	.word	String_init
	.word	VarList_protObj
	.word	VarList_init
	.word	VarListNE_protObj
	.word	VarListNE_init
	.word	LambdaList_protObj
	.word	LambdaList_init
	.word	LambdaListNE_protObj
	.word	LambdaListNE_init
	.word	LambdaListRef_protObj
	.word	LambdaListRef_init
	.word	Expr_protObj
	.word	Expr_init
	.word	Variable_protObj
	.word	Variable_init
	.word	Lambda_protObj
	.word	Lambda_init
	.word	App_protObj
	.word	App_init
	.word	Term_protObj
	.word	Term_init
	.word	Main_protObj
	.word	Main_init
Main_dispTab:
	.word	Object.abort
	.word	Object.type_name
	.word	Object.copy
	.word	IO.out_string
	.word	IO.out_int
	.word	IO.in_string
	.word	IO.in_int
	.word	Term.var
	.word	Term.lam
	.word	Term.app
	.word	Term.i
	.word	Term.k
	.word	Term.s
	.word	Main.beta_reduce
	.word	Main.eval_class
	.word	Main.closure_class
	.word	Main.gen_code
	.word	Main.main
Term_dispTab:
	.word	Object.abort
	.word	Object.type_name
	.word	Object.copy
	.word	IO.out_string
	.word	IO.out_int
	.word	IO.in_string
	.word	IO.in_int
	.word	Term.var
	.word	Term.lam
	.word	Term.app
	.word	Term.i
	.word	Term.k
	.word	Term.s
App_dispTab:
	.word	Object.abort
	.word	Object.type_name
	.word	Object.copy
	.word	IO.out_string
	.word	IO.out_int
	.word	IO.in_string
	.word	IO.in_int
	.word	App.print_self
	.word	App.beta
	.word	App.substitute
	.word	App.gen_code
	.word	App.init
Lambda_dispTab:
	.word	Object.abort
	.word	Object.type_name
	.word	Object.copy
	.word	IO.out_string
	.word	IO.out_int
	.word	IO.in_string
	.word	IO.in_int
	.word	Lambda.print_self
	.word	Lambda.beta
	.word	Lambda.substitute
	.word	Lambda.gen_code
	.word	Lambda.init
	.word	Lambda.apply
	.word	Lambda.gen_closure_code
Variable_dispTab:
	.word	Object.abort
	.word	Object.type_name
	.word	Object.copy
	.word	IO.out_string
	.word	IO.out_int
	.word	IO.in_string
	.word	IO.in_int
	.word	Variable.print_self
	.word	Variable.beta
	.word	Variable.substitute
	.word	Variable.gen_code
	.word	Variable.init
Expr_dispTab:
	.word	Object.abort
	.word	Object.type_name
	.word	Object.copy
	.word	IO.out_string
	.word	IO.out_int
	.word	IO.in_string
	.word	IO.in_int
	.word	Expr.print_self
	.word	Expr.beta
	.word	Expr.substitute
	.word	Expr.gen_code
LambdaListRef_dispTab:
	.word	Object.abort
	.word	Object.type_name
	.word	Object.copy
	.word	LambdaListRef.isNil
	.word	LambdaListRef.headE
	.word	LambdaListRef.headC
	.word	LambdaListRef.headN
	.word	LambdaListRef.reset
	.word	LambdaListRef.add
	.word	LambdaListRef.removeHead
LambdaListNE_dispTab:
	.word	Object.abort
	.word	Object.type_name
	.word	Object.copy
	.word	LambdaListNE.isNil
	.word	LambdaListNE.headE
	.word	LambdaListNE.headC
	.word	LambdaListNE.headN
	.word	LambdaListNE.tail
	.word	LambdaList.add
	.word	LambdaListNE.init
LambdaList_dispTab:
	.word	Object.abort
	.word	Object.type_name
	.word	Object.copy
	.word	LambdaList.isNil
	.word	LambdaList.headE
	.word	LambdaList.headC
	.word	LambdaList.headN
	.word	LambdaList.tail
	.word	LambdaList.add
VarListNE_dispTab:
	.word	Object.abort
	.word	Object.type_name
	.word	Object.copy
	.word	IO.out_string
	.word	IO.out_int
	.word	IO.in_string
	.word	IO.in_int
	.word	VarListNE.isNil
	.word	VarListNE.head
	.word	VarListNE.tail
	.word	VarList.add
	.word	VarListNE.print
	.word	VarListNE.init
VarList_dispTab:
	.word	Object.abort
	.word	Object.type_name
	.word	Object.copy
	.word	IO.out_string
	.word	IO.out_int
	.word	IO.in_string
	.word	IO.in_int
	.word	VarList.isNil
	.word	VarList.head
	.word	VarList.tail
	.word	VarList.add
	.word	VarList.print
String_dispTab:
	.word	Object.abort
	.word	Object.type_name
	.word	Object.copy
	.word	String.length
	.word	String.concat
	.word	String.substr
Bool_dispTab:
	.word	Object.abort
	.word	Object.type_name
	.word	Object.copy
Int_dispTab:
	.word	Object.abort
	.word	Object.type_name
	.word	Object.copy
IO_dispTab:
	.word	Object.abort
	.word	Object.type_name
	.word	Object.copy
	.word	IO.out_string
	.word	IO.out_int
	.word	IO.in_string
	.word	IO.in_int
Object_dispTab:
	.word	Object.abort
	.word	Object.type_name
	.word	Object.copy
	.word	-1
Main_protObj:
	.word	15
	.word	3
	.word	Main_dispTab
	.word	-1
Term_protObj:
	.word	14
	.word	3
	.word	Term_dispTab
	.word	-1
App_protObj:
	.word	13
	.word	5
	.word	App_dispTab
	.word	0
	.word	0
	.word	-1
Lambda_protObj:
	.word	12
	.word	5
	.word	Lambda_dispTab
	.word	0
	.word	0
	.word	-1
Variable_protObj:
	.word	11
	.word	4
	.word	Variable_dispTab
	.word	str_const75
	.word	-1
Expr_protObj:
	.word	10
	.word	3
	.word	Expr_dispTab
	.word	-1
LambdaListRef_protObj:
	.word	9
	.word	5
	.word	LambdaListRef_dispTab
	.word	int_const1
	.word	0
	.word	-1
LambdaListNE_protObj:
	.word	8
	.word	7
	.word	LambdaListNE_dispTab
	.word	0
	.word	int_const1
	.word	0
	.word	0
	.word	-1
LambdaList_protObj:
	.word	7
	.word	3
	.word	LambdaList_dispTab
	.word	-1
VarListNE_protObj:
	.word	6
	.word	5
	.word	VarListNE_dispTab
	.word	0
	.word	0
	.word	-1
VarList_protObj:
	.word	5
	.word	3
	.word	VarList_dispTab
	.word	-1
String_protObj:
	.word	4
	.word	5
	.word	String_dispTab
	.word	int_const1
	.word	0
	.word	-1
Bool_protObj:
	.word	3
	.word	4
	.word	Bool_dispTab
	.word	0
	.word	-1
Int_protObj:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	0
	.word	-1
IO_protObj:
	.word	1
	.word	3
	.word	IO_dispTab
	.word	-1
Object_protObj:
	.word	0
	.word	3
	.word	Object_dispTab
# coding global text
	.globl	heap_start
heap_start:
	.word	0
	.text
	.globl	Main_init
	.globl	Int_init
	.globl	String_init
	.globl	Bool_init
	.globl	Main.main
  # Initialization code 
Main_init:
	addiu	$sp $sp -12 # 
	sw	$fp 12($sp) # 
	sw	$s0 8($sp) # 
	sw	$ra 4($sp) # 
	addiu	$fp $sp 4 # 
	move	$s0 $a0 # 
	jal	Term_init # 
	move	$a0 $s0 # 
	lw	$fp 12($sp) # 
	lw	$s0 8($sp) # 
	lw	$ra 4($sp) # 
	addiu	$sp $sp 12 # 
	jr	$ra	 # 
Term_init:
	addiu	$sp $sp -12 # 
	sw	$fp 12($sp) # 
	sw	$s0 8($sp) # 
	sw	$ra 4($sp) # 
	addiu	$fp $sp 4 # 
	move	$s0 $a0 # 
	jal	IO_init # 
	move	$a0 $s0 # 
	lw	$fp 12($sp) # 
	lw	$s0 8($sp) # 
	lw	$ra 4($sp) # 
	addiu	$sp $sp 12 # 
	jr	$ra	 # 
App_init:
	addiu	$sp $sp -12 # 
	sw	$fp 12($sp) # 
	sw	$s0 8($sp) # 
	sw	$ra 4($sp) # 
	addiu	$fp $sp 4 # 
	move	$s0 $a0 # 
	jal	Expr_init # 
	move	$a0 $s0 # 
	lw	$fp 12($sp) # 
	lw	$s0 8($sp) # 
	lw	$ra 4($sp) # 
	addiu	$sp $sp 12 # 
	jr	$ra	 # 
Lambda_init:
	addiu	$sp $sp -12 # 
	sw	$fp 12($sp) # 
	sw	$s0 8($sp) # 
	sw	$ra 4($sp) # 
	addiu	$fp $sp 4 # 
	move	$s0 $a0 # 
	jal	Expr_init # 
	move	$a0 $s0 # 
	lw	$fp 12($sp) # 
	lw	$s0 8($sp) # 
	lw	$ra 4($sp) # 
	addiu	$sp $sp 12 # 
	jr	$ra	 # 
Variable_init:
	addiu	$sp $sp -12 # 
	sw	$fp 12($sp) # 
	sw	$s0 8($sp) # 
	sw	$ra 4($sp) # 
	addiu	$fp $sp 4 # 
	move	$s0 $a0 # 
	jal	Expr_init # 
	move	$a0 $s0 # 
	lw	$fp 12($sp) # 
	lw	$s0 8($sp) # 
	lw	$ra 4($sp) # 
	addiu	$sp $sp 12 # 
	jr	$ra	 # 
Expr_init:
	addiu	$sp $sp -12 # 
	sw	$fp 12($sp) # 
	sw	$s0 8($sp) # 
	sw	$ra 4($sp) # 
	addiu	$fp $sp 4 # 
	move	$s0 $a0 # 
	jal	IO_init # 
	move	$a0 $s0 # 
	lw	$fp 12($sp) # 
	lw	$s0 8($sp) # 
	lw	$ra 4($sp) # 
	addiu	$sp $sp 12 # 
	jr	$ra	 # 
LambdaListRef_init:
	addiu	$sp $sp -12 # 
	sw	$fp 12($sp) # 
	sw	$s0 8($sp) # 
	sw	$ra 4($sp) # 
	addiu	$fp $sp 4 # 
	move	$s0 $a0 # 
	jal	Object_init # 
	move	$a0 $s0 # 
	lw	$fp 12($sp) # 
	lw	$s0 8($sp) # 
	lw	$ra 4($sp) # 
	addiu	$sp $sp 12 # 
	jr	$ra	 # 
LambdaListNE_init:
	addiu	$sp $sp -12 # 
	sw	$fp 12($sp) # 
	sw	$s0 8($sp) # 
	sw	$ra 4($sp) # 
	addiu	$fp $sp 4 # 
	move	$s0 $a0 # 
	jal	LambdaList_init # 
	move	$a0 $s0 # 
	lw	$fp 12($sp) # 
	lw	$s0 8($sp) # 
	lw	$ra 4($sp) # 
	addiu	$sp $sp 12 # 
	jr	$ra	 # 
LambdaList_init:
	addiu	$sp $sp -12 # 
	sw	$fp 12($sp) # 
	sw	$s0 8($sp) # 
	sw	$ra 4($sp) # 
	addiu	$fp $sp 4 # 
	move	$s0 $a0 # 
	jal	Object_init # 
	move	$a0 $s0 # 
	lw	$fp 12($sp) # 
	lw	$s0 8($sp) # 
	lw	$ra 4($sp) # 
	addiu	$sp $sp 12 # 
	jr	$ra	 # 
VarListNE_init:
	addiu	$sp $sp -12 # 
	sw	$fp 12($sp) # 
	sw	$s0 8($sp) # 
	sw	$ra 4($sp) # 
	addiu	$fp $sp 4 # 
	move	$s0 $a0 # 
	jal	VarList_init # 
	move	$a0 $s0 # 
	lw	$fp 12($sp) # 
	lw	$s0 8($sp) # 
	lw	$ra 4($sp) # 
	addiu	$sp $sp 12 # 
	jr	$ra	 # 
VarList_init:
	addiu	$sp $sp -12 # 
	sw	$fp 12($sp) # 
	sw	$s0 8($sp) # 
	sw	$ra 4($sp) # 
	addiu	$fp $sp 4 # 
	move	$s0 $a0 # 
	jal	IO_init # 
	move	$a0 $s0 # 
	lw	$fp 12($sp) # 
	lw	$s0 8($sp) # 
	lw	$ra 4($sp) # 
	addiu	$sp $sp 12 # 
	jr	$ra	 # 
String_init:
	addiu	$sp $sp -12 # 
	sw	$fp 12($sp) # 
	sw	$s0 8($sp) # 
	sw	$ra 4($sp) # 
	addiu	$fp $sp 4 # 
	move	$s0 $a0 # 
	jal	Object_init # 
	move	$a0 $s0 # 
	lw	$fp 12($sp) # 
	lw	$s0 8($sp) # 
	lw	$ra 4($sp) # 
	addiu	$sp $sp 12 # 
	jr	$ra	 # 
Bool_init:
	addiu	$sp $sp -12 # 
	sw	$fp 12($sp) # 
	sw	$s0 8($sp) # 
	sw	$ra 4($sp) # 
	addiu	$fp $sp 4 # 
	move	$s0 $a0 # 
	jal	Object_init # 
	move	$a0 $s0 # 
	lw	$fp 12($sp) # 
	lw	$s0 8($sp) # 
	lw	$ra 4($sp) # 
	addiu	$sp $sp 12 # 
	jr	$ra	 # 
Int_init:
	addiu	$sp $sp -12 # 
	sw	$fp 12($sp) # 
	sw	$s0 8($sp) # 
	sw	$ra 4($sp) # 
	addiu	$fp $sp 4 # 
	move	$s0 $a0 # 
	jal	Object_init # 
	move	$a0 $s0 # 
	lw	$fp 12($sp) # 
	lw	$s0 8($sp) # 
	lw	$ra 4($sp) # 
	addiu	$sp $sp 12 # 
	jr	$ra	 # 
IO_init:
	addiu	$sp $sp -12 # 
	sw	$fp 12($sp) # 
	sw	$s0 8($sp) # 
	sw	$ra 4($sp) # 
	addiu	$fp $sp 4 # 
	move	$s0 $a0 # 
	jal	Object_init # 
	move	$a0 $s0 # 
	lw	$fp 12($sp) # 
	lw	$s0 8($sp) # 
	lw	$ra 4($sp) # 
	addiu	$sp $sp 12 # 
	jr	$ra	 # 
Object_init:
	addiu	$sp $sp -12 # 
	sw	$fp 12($sp) # 
	sw	$s0 8($sp) # 
	sw	$ra 4($sp) # 
	addiu	$fp $sp 4 # 
	move	$s0 $a0 # 
	move	$a0 $s0 # 
	lw	$fp 12($sp) # 
	lw	$s0 8($sp) # 
	lw	$ra 4($sp) # 
	addiu	$sp $sp 12 # 
	jr	$ra	 # 
Main.beta_reduce:
	addiu	$sp $sp -24 # beta_reduce
	sw	$fp 12($sp) # beta_reduce
	sw	$s0 8($sp) # beta_reduce
	sw	$ra 4($sp) # beta_reduce
	addiu	$fp $sp 4 # beta_reduce
	move	$s0 $a0 # beta_reduce
 # formal e
	lw	$fp 12($sp) # beta_reduce
	lw	$s0 8($sp) # beta_reduce
	lw	$ra 4($sp) # beta_reduce
	addiu	$sp $sp 28 # beta_reduce
	jr	$ra	 # beta_reduce
Main.eval_class:
	addiu	$sp $sp -12 # eval_class
	sw	$fp 12($sp) # eval_class
	sw	$s0 8($sp) # eval_class
	sw	$ra 4($sp) # eval_class
	addiu	$fp $sp 4 # eval_class
	move	$s0 $a0 # eval_class
	lw	$fp 12($sp) # eval_class
	lw	$s0 8($sp) # eval_class
	lw	$ra 4($sp) # eval_class
	addiu	$sp $sp 12 # eval_class
	jr	$ra	 # eval_class
Main.closure_class:
	addiu	$sp $sp -12 # closure_class
	sw	$fp 12($sp) # closure_class
	sw	$s0 8($sp) # closure_class
	sw	$ra 4($sp) # closure_class
	addiu	$fp $sp 4 # closure_class
	move	$s0 $a0 # closure_class
	lw	$fp 12($sp) # closure_class
	lw	$s0 8($sp) # closure_class
	lw	$ra 4($sp) # closure_class
	addiu	$sp $sp 12 # closure_class
	jr	$ra	 # closure_class
Main.gen_code:
	addiu	$sp $sp -28 # gen_code
	sw	$fp 12($sp) # gen_code
	sw	$s0 8($sp) # gen_code
	sw	$ra 4($sp) # gen_code
	addiu	$fp $sp 4 # gen_code
	move	$s0 $a0 # gen_code
 # formal e
 # let code for name cl
	la	$a0 LambdaListRef_protObj # gen_code
	jal	Object.copy # gen_code
	jal	LambdaListRef_init
	bne	$a0 $zero label0 # gen_code
	la	$a0 str_const0 # gen_code
	li	$t1 1 # gen_code
	jal	_dispatch_abort # gen_code
label0: # gen_code
	lw	$t1 8($a0) # gen_code
	lw	$t1 28($t1) # gen_code
	jalr	$t1 # gen_code
	sw	$a0 12($fp) # gen_code
	lw	$fp 12($sp) # gen_code
	lw	$s0 8($sp) # gen_code
	lw	$ra 4($sp) # gen_code
	addiu	$sp $sp 32 # gen_code
	jr	$ra	 # gen_code
Main.main:
	addiu	$sp $sp -12 # main
	sw	$fp 12($sp) # main
	sw	$s0 8($sp) # main
	sw	$ra 4($sp) # main
	addiu	$fp $sp 4 # main
	move	$s0 $a0 # main
	lw	$fp 12($sp) # main
	lw	$s0 8($sp) # main
	lw	$ra 4($sp) # main
	addiu	$sp $sp 12 # main
	jr	$ra	 # main
Term.var:
	addiu	$sp $sp -16 # var
	sw	$fp 12($sp) # var
	sw	$s0 8($sp) # var
	sw	$ra 4($sp) # var
	addiu	$fp $sp 4 # var
	move	$s0 $a0 # var
 # formal x
 # let code for name v
	la	$a0 Variable_protObj # var
	jal	Object.copy # var
	jal	Variable_init
	sw	$a0 12($fp) # var
#  ==> x offset : 4 self type:M 
#  ==> v offset : 3 Term type:M 
#  -> curr off 16
# for x method 
	lw	$a0 16($fp) # var
	sw	$a0 0($sp) # var
	addiu	$sp $sp -4 # var
#  ==> x offset : 4 self type:M 
#  ==> v offset : 3 Term type:M 
#  -> curr off 12
# for v method 
	lw	$a0 12($fp) # var
	bne	$a0 $zero label1 # var
	la	$a0 str_const0 # var
	li	$t1 1 # var
	jal	_dispatch_abort # var
label1: # var
	lw	$t1 8($a0) # var
	lw	$t1 44($t1) # var
	jalr	$t1 # var
	lw	$fp 12($sp) # var
	lw	$s0 8($sp) # var
	lw	$ra 4($sp) # var
	addiu	$sp $sp 20 # var
	jr	$ra	 # var
Term.lam:
	addiu	$sp $sp -16 # lam
	sw	$fp 12($sp) # lam
	sw	$s0 8($sp) # lam
	sw	$ra 4($sp) # lam
	addiu	$fp $sp 4 # lam
	move	$s0 $a0 # lam
 # formal x
 # formal e
 # let code for name l
	la	$a0 Lambda_protObj # lam
	jal	Object.copy # lam
	jal	Lambda_init
	sw	$a0 12($fp) # lam
#  ==> x offset : 5 self type:M 
#  ==> e offset : 4 self type:M 
#  ==> l offset : 3 Term type:M 
#  -> curr off 20
# for x method 
	lw	$a0 20($fp) # lam
	sw	$a0 0($sp) # lam
	addiu	$sp $sp -4 # lam
#  ==> x offset : 5 self type:M 
#  ==> e offset : 4 self type:M 
#  ==> l offset : 3 Term type:M 
#  -> curr off 16
# for e method 
	lw	$a0 16($fp) # lam
	sw	$a0 0($sp) # lam
	addiu	$sp $sp -4 # lam
#  ==> x offset : 5 self type:M 
#  ==> e offset : 4 self type:M 
#  ==> l offset : 3 Term type:M 
#  -> curr off 12
# for l method 
	lw	$a0 12($fp) # lam
	bne	$a0 $zero label2 # lam
	la	$a0 str_const0 # lam
	li	$t1 1 # lam
	jal	_dispatch_abort # lam
label2: # lam
	lw	$t1 8($a0) # lam
	lw	$t1 44($t1) # lam
	jalr	$t1 # lam
	lw	$fp 12($sp) # lam
	lw	$s0 8($sp) # lam
	lw	$ra 4($sp) # lam
	addiu	$sp $sp 24 # lam
	jr	$ra	 # lam
Term.app:
	addiu	$sp $sp -16 # app
	sw	$fp 12($sp) # app
	sw	$s0 8($sp) # app
	sw	$ra 4($sp) # app
	addiu	$fp $sp 4 # app
	move	$s0 $a0 # app
 # formal e1
 # formal e2
 # let code for name a
	la	$a0 App_protObj # app
	jal	Object.copy # app
	jal	App_init
	sw	$a0 12($fp) # app
#  ==> e1 offset : 5 self type:M 
#  ==> e2 offset : 4 self type:M 
#  ==> a offset : 3 Term type:M 
#  -> curr off 20
# for e1 method 
	lw	$a0 20($fp) # app
	sw	$a0 0($sp) # app
	addiu	$sp $sp -4 # app
#  ==> e1 offset : 5 self type:M 
#  ==> e2 offset : 4 self type:M 
#  ==> a offset : 3 Term type:M 
#  -> curr off 16
# for e2 method 
	lw	$a0 16($fp) # app
	sw	$a0 0($sp) # app
	addiu	$sp $sp -4 # app
#  ==> e1 offset : 5 self type:M 
#  ==> e2 offset : 4 self type:M 
#  ==> a offset : 3 Term type:M 
#  -> curr off 12
# for a method 
	lw	$a0 12($fp) # app
	bne	$a0 $zero label3 # app
	la	$a0 str_const0 # app
	li	$t1 1 # app
	jal	_dispatch_abort # app
label3: # app
	lw	$t1 8($a0) # app
	lw	$t1 44($t1) # app
	jalr	$t1 # app
	lw	$fp 12($sp) # app
	lw	$s0 8($sp) # app
	lw	$ra 4($sp) # app
	addiu	$sp $sp 24 # app
	jr	$ra	 # app
Term.i:
	addiu	$sp $sp -16 # i
	sw	$fp 12($sp) # i
	sw	$s0 8($sp) # i
	sw	$ra 4($sp) # i
	addiu	$fp $sp 4 # i
	move	$s0 $a0 # i
 # let code for name x
	la	$a0 str_const35 # i
	sw	$a0 0($sp) # i
	addiu	$sp $sp -4 # i
# for self SELF 
	move	$a0 $s0 # i
	bne	$a0 $zero label4 # i
	la	$a0 str_const0 # i
	li	$t1 1 # i
	jal	_dispatch_abort # i
label4: # i
	lw	$t1 8($a0) # i
	lw	$t1 28($t1) # i
	jalr	$t1 # i
	sw	$a0 12($fp) # i
#  ==> x offset : 3 Term type:M 
#  -> curr off 12
# for x method 
	lw	$a0 12($fp) # i
	sw	$a0 0($sp) # i
	addiu	$sp $sp -4 # i
#  ==> x offset : 3 Term type:M 
#  -> curr off 12
# for x method 
	lw	$a0 12($fp) # i
	sw	$a0 0($sp) # i
	addiu	$sp $sp -4 # i
# for self SELF 
	move	$a0 $s0 # i
	bne	$a0 $zero label5 # i
	la	$a0 str_const0 # i
	li	$t1 1 # i
	jal	_dispatch_abort # i
label5: # i
	lw	$t1 8($a0) # i
	lw	$t1 32($t1) # i
	jalr	$t1 # i
	lw	$fp 12($sp) # i
	lw	$s0 8($sp) # i
	lw	$ra 4($sp) # i
	addiu	$sp $sp 16 # i
	jr	$ra	 # i
Term.k:
	addiu	$sp $sp -20 # k
	sw	$fp 12($sp) # k
	sw	$s0 8($sp) # k
	sw	$ra 4($sp) # k
	addiu	$fp $sp 4 # k
	move	$s0 $a0 # k
 # let code for name x
	la	$a0 str_const35 # k
	sw	$a0 0($sp) # k
	addiu	$sp $sp -4 # k
# for self SELF 
	move	$a0 $s0 # k
	bne	$a0 $zero label6 # k
	la	$a0 str_const0 # k
	li	$t1 1 # k
	jal	_dispatch_abort # k
label6: # k
	lw	$t1 8($a0) # k
	lw	$t1 28($t1) # k
	jalr	$t1 # k
	sw	$a0 12($fp) # k
 # let code for name y
	la	$a0 str_const36 # k
	sw	$a0 0($sp) # k
	addiu	$sp $sp -4 # k
# for self SELF 
	move	$a0 $s0 # k
	bne	$a0 $zero label7 # k
	la	$a0 str_const0 # k
	li	$t1 1 # k
	jal	_dispatch_abort # k
label7: # k
	lw	$t1 8($a0) # k
	lw	$t1 28($t1) # k
	jalr	$t1 # k
	sw	$a0 16($fp) # k
#  ==> x offset : 3 Term type:M 
#  ==> y offset : 4 Term type:M 
#  -> curr off 12
# for x method 
	lw	$a0 12($fp) # k
	sw	$a0 0($sp) # k
	addiu	$sp $sp -4 # k
#  ==> x offset : 3 Term type:M 
#  ==> y offset : 4 Term type:M 
#  -> curr off 16
# for y method 
	lw	$a0 16($fp) # k
	sw	$a0 0($sp) # k
	addiu	$sp $sp -4 # k
#  ==> x offset : 3 Term type:M 
#  ==> y offset : 4 Term type:M 
#  -> curr off 12
# for x method 
	lw	$a0 12($fp) # k
	sw	$a0 0($sp) # k
	addiu	$sp $sp -4 # k
# for self SELF 
	move	$a0 $s0 # k
	bne	$a0 $zero label8 # k
	la	$a0 str_const0 # k
	li	$t1 1 # k
	jal	_dispatch_abort # k
label8: # k
	lw	$t1 8($a0) # k
	lw	$t1 32($t1) # k
	jalr	$t1 # k
	sw	$a0 0($sp) # k
	addiu	$sp $sp -4 # k
# for self SELF 
	move	$a0 $s0 # k
	bne	$a0 $zero label9 # k
	la	$a0 str_const0 # k
	li	$t1 1 # k
	jal	_dispatch_abort # k
label9: # k
	lw	$t1 8($a0) # k
	lw	$t1 32($t1) # k
	jalr	$t1 # k
	lw	$fp 12($sp) # k
	lw	$s0 8($sp) # k
	lw	$ra 4($sp) # k
	addiu	$sp $sp 20 # k
	jr	$ra	 # k
Term.s:
	addiu	$sp $sp -24 # s
	sw	$fp 12($sp) # s
	sw	$s0 8($sp) # s
	sw	$ra 4($sp) # s
	addiu	$fp $sp 4 # s
	move	$s0 $a0 # s
 # let code for name x
	la	$a0 str_const35 # s
	sw	$a0 0($sp) # s
	addiu	$sp $sp -4 # s
# for self SELF 
	move	$a0 $s0 # s
	bne	$a0 $zero label10 # s
	la	$a0 str_const0 # s
	li	$t1 1 # s
	jal	_dispatch_abort # s
label10: # s
	lw	$t1 8($a0) # s
	lw	$t1 28($t1) # s
	jalr	$t1 # s
	sw	$a0 12($fp) # s
 # let code for name y
	la	$a0 str_const36 # s
	sw	$a0 0($sp) # s
	addiu	$sp $sp -4 # s
# for self SELF 
	move	$a0 $s0 # s
	bne	$a0 $zero label11 # s
	la	$a0 str_const0 # s
	li	$t1 1 # s
	jal	_dispatch_abort # s
label11: # s
	lw	$t1 8($a0) # s
	lw	$t1 28($t1) # s
	jalr	$t1 # s
	sw	$a0 16($fp) # s
 # let code for name z
	la	$a0 str_const37 # s
	sw	$a0 0($sp) # s
	addiu	$sp $sp -4 # s
# for self SELF 
	move	$a0 $s0 # s
	bne	$a0 $zero label12 # s
	la	$a0 str_const0 # s
	li	$t1 1 # s
	jal	_dispatch_abort # s
label12: # s
	lw	$t1 8($a0) # s
	lw	$t1 28($t1) # s
	jalr	$t1 # s
	sw	$a0 20($fp) # s
#  ==> x offset : 3 Term type:M 
#  ==> y offset : 4 Term type:M 
#  ==> z offset : 5 Term type:M 
#  -> curr off 12
# for x method 
	lw	$a0 12($fp) # s
	sw	$a0 0($sp) # s
	addiu	$sp $sp -4 # s
#  ==> x offset : 3 Term type:M 
#  ==> y offset : 4 Term type:M 
#  ==> z offset : 5 Term type:M 
#  -> curr off 16
# for y method 
	lw	$a0 16($fp) # s
	sw	$a0 0($sp) # s
	addiu	$sp $sp -4 # s
#  ==> x offset : 3 Term type:M 
#  ==> y offset : 4 Term type:M 
#  ==> z offset : 5 Term type:M 
#  -> curr off 20
# for z method 
	lw	$a0 20($fp) # s
	sw	$a0 0($sp) # s
	addiu	$sp $sp -4 # s
#  ==> x offset : 3 Term type:M 
#  ==> y offset : 4 Term type:M 
#  ==> z offset : 5 Term type:M 
#  -> curr off 12
# for x method 
	lw	$a0 12($fp) # s
	sw	$a0 0($sp) # s
	addiu	$sp $sp -4 # s
#  ==> x offset : 3 Term type:M 
#  ==> y offset : 4 Term type:M 
#  ==> z offset : 5 Term type:M 
#  -> curr off 20
# for z method 
	lw	$a0 20($fp) # s
	sw	$a0 0($sp) # s
	addiu	$sp $sp -4 # s
# for self SELF 
	move	$a0 $s0 # s
	bne	$a0 $zero label13 # s
	la	$a0 str_const0 # s
	li	$t1 1 # s
	jal	_dispatch_abort # s
label13: # s
	lw	$t1 8($a0) # s
	lw	$t1 36($t1) # s
	jalr	$t1 # s
	sw	$a0 0($sp) # s
	addiu	$sp $sp -4 # s
#  ==> x offset : 3 Term type:M 
#  ==> y offset : 4 Term type:M 
#  ==> z offset : 5 Term type:M 
#  -> curr off 16
# for y method 
	lw	$a0 16($fp) # s
	sw	$a0 0($sp) # s
	addiu	$sp $sp -4 # s
#  ==> x offset : 3 Term type:M 
#  ==> y offset : 4 Term type:M 
#  ==> z offset : 5 Term type:M 
#  -> curr off 20
# for z method 
	lw	$a0 20($fp) # s
	sw	$a0 0($sp) # s
	addiu	$sp $sp -4 # s
# for self SELF 
	move	$a0 $s0 # s
	bne	$a0 $zero label14 # s
	la	$a0 str_const0 # s
	li	$t1 1 # s
	jal	_dispatch_abort # s
label14: # s
	lw	$t1 8($a0) # s
	lw	$t1 36($t1) # s
	jalr	$t1 # s
	sw	$a0 0($sp) # s
	addiu	$sp $sp -4 # s
# for self SELF 
	move	$a0 $s0 # s
	bne	$a0 $zero label15 # s
	la	$a0 str_const0 # s
	li	$t1 1 # s
	jal	_dispatch_abort # s
label15: # s
	lw	$t1 8($a0) # s
	lw	$t1 36($t1) # s
	jalr	$t1 # s
	sw	$a0 0($sp) # s
	addiu	$sp $sp -4 # s
# for self SELF 
	move	$a0 $s0 # s
	bne	$a0 $zero label16 # s
	la	$a0 str_const0 # s
	li	$t1 1 # s
	jal	_dispatch_abort # s
label16: # s
	lw	$t1 8($a0) # s
	lw	$t1 32($t1) # s
	jalr	$t1 # s
	sw	$a0 0($sp) # s
	addiu	$sp $sp -4 # s
# for self SELF 
	move	$a0 $s0 # s
	bne	$a0 $zero label17 # s
	la	$a0 str_const0 # s
	li	$t1 1 # s
	jal	_dispatch_abort # s
label17: # s
	lw	$t1 8($a0) # s
	lw	$t1 32($t1) # s
	jalr	$t1 # s
	sw	$a0 0($sp) # s
	addiu	$sp $sp -4 # s
# for self SELF 
	move	$a0 $s0 # s
	bne	$a0 $zero label18 # s
	la	$a0 str_const0 # s
	li	$t1 1 # s
	jal	_dispatch_abort # s
label18: # s
	lw	$t1 8($a0) # s
	lw	$t1 32($t1) # s
	jalr	$t1 # s
	lw	$fp 12($sp) # s
	lw	$s0 8($sp) # s
	lw	$ra 4($sp) # s
	addiu	$sp $sp 24 # s
	jr	$ra	 # s
App.init:
	addiu	$sp $sp -12 # init
	sw	$fp 12($sp) # init
	sw	$s0 8($sp) # init
	sw	$ra 4($sp) # init
	addiu	$fp $sp 4 # init
	move	$s0 $a0 # init
 # formal f
 # formal a
	lw	$fp 12($sp) # init
	lw	$s0 8($sp) # init
	lw	$ra 4($sp) # init
	addiu	$sp $sp 20 # init
	jr	$ra	 # init
App.print_self:
	addiu	$sp $sp -12 # print_self
	sw	$fp 12($sp) # print_self
	sw	$s0 8($sp) # print_self
	sw	$ra 4($sp) # print_self
	addiu	$fp $sp 4 # print_self
	move	$s0 $a0 # print_self
	lw	$fp 12($sp) # print_self
	lw	$s0 8($sp) # print_self
	lw	$ra 4($sp) # print_self
	addiu	$sp $sp 12 # print_self
	jr	$ra	 # print_self
App.beta:
	addiu	$sp $sp -24 # beta
	sw	$fp 12($sp) # beta
	sw	$s0 8($sp) # beta
	sw	$ra 4($sp) # beta
	addiu	$fp $sp 4 # beta
	move	$s0 $a0 # beta
#  ==> fun offset : 3 App type:O 
#  ==> arg offset : 4 App type:O 
#  -> curr off 12
# for fun self 
	lw	$a0 12($s0) # beta
	bne	$a0 $zero label19 # beta
	la	$a0 str_const0 # beta
	li	$t1 1 # beta
	jal	_case_abort2 # beta
label19: # beta
	lw	$t0 0($a0) # beta
	sw	$a0 12($fp) # beta
label21: # beta
	blt	$t0 12 label22 # beta
	bgt	$t0 12 label22 # beta
#  ==> fun offset : 3 App type:O 
#  ==> arg offset : 4 App type:O 
#  ==> l offset : 3 App type:M 
#  -> curr off 16
# for arg self 
	lw	$a0 16($s0) # beta
	sw	$a0 0($sp) # beta
	addiu	$sp $sp -4 # beta
#  ==> fun offset : 3 App type:O 
#  ==> arg offset : 4 App type:O 
#  ==> l offset : 3 App type:M 
#  -> curr off 12
# for l method 
	lw	$a0 12($fp) # beta
	bne	$a0 $zero label23 # beta
	la	$a0 str_const0 # beta
	li	$t1 1 # beta
	jal	_dispatch_abort # beta
label23: # beta
	lw	$t1 8($a0) # beta
	lw	$t1 48($t1) # beta
	jalr	$t1 # beta
	b	label20 # beta
label22: # beta
	blt	$t0 10 label24 # beta
	bgt	$t0 13 label24 # beta
 # let code for name new_fun
#  ==> fun offset : 3 App type:O 
#  ==> arg offset : 4 App type:O 
#  ==> e offset : 3 App type:M 
#  -> curr off 12
# for fun self 
	lw	$a0 12($s0) # beta
	bne	$a0 $zero label25 # beta
	la	$a0 str_const0 # beta
	li	$t1 1 # beta
	jal	_dispatch_abort # beta
label25: # beta
	lw	$t1 8($a0) # beta
	lw	$t1 32($t1) # beta
	jalr	$t1 # beta
	sw	$a0 16($fp) # beta
 # let code for name new_app
	la	$a0 App_protObj # beta
	jal	Object.copy # beta
	jal	App_init
	sw	$a0 20($fp) # beta
#  ==> fun offset : 3 App type:O 
#  ==> arg offset : 4 App type:O 
#  ==> e offset : 3 App type:M 
#  ==> new_fun offset : 4 App type:M 
#  ==> new_app offset : 5 App type:M 
#  -> curr off 16
# for new_fun method 
	lw	$a0 16($fp) # beta
	sw	$a0 0($sp) # beta
	addiu	$sp $sp -4 # beta
#  ==> fun offset : 3 App type:O 
#  ==> arg offset : 4 App type:O 
#  ==> e offset : 3 App type:M 
#  ==> new_fun offset : 4 App type:M 
#  ==> new_app offset : 5 App type:M 
#  -> curr off 16
# for arg self 
	lw	$a0 16($s0) # beta
	sw	$a0 0($sp) # beta
	addiu	$sp $sp -4 # beta
#  ==> fun offset : 3 App type:O 
#  ==> arg offset : 4 App type:O 
#  ==> e offset : 3 App type:M 
#  ==> new_fun offset : 4 App type:M 
#  ==> new_app offset : 5 App type:M 
#  -> curr off 20
# for new_app method 
	lw	$a0 20($fp) # beta
	bne	$a0 $zero label26 # beta
	la	$a0 str_const0 # beta
	li	$t1 1 # beta
	jal	_dispatch_abort # beta
label26: # beta
	lw	$t1 8($a0) # beta
	lw	$t1 44($t1) # beta
	jalr	$t1 # beta
	b	label20 # beta
label24: # beta
	jal	_case_abort # beta
label20: # beta
	lw	$fp 12($sp) # beta
	lw	$s0 8($sp) # beta
	lw	$ra 4($sp) # beta
	addiu	$sp $sp 24 # beta
	jr	$ra	 # beta
App.substitute:
	addiu	$sp $sp -24 # substitute
	sw	$fp 12($sp) # substitute
	sw	$s0 8($sp) # substitute
	sw	$ra 4($sp) # substitute
	addiu	$fp $sp 4 # substitute
	move	$s0 $a0 # substitute
 # formal x
 # formal e
 # let code for name new_fun
#  ==> fun offset : 3 App type:O 
#  ==> arg offset : 4 App type:O 
#  ==> x offset : 7 self type:M 
#  ==> e offset : 6 self type:M 
#  -> curr off 28
# for x method 
	lw	$a0 28($fp) # substitute
	sw	$a0 0($sp) # substitute
	addiu	$sp $sp -4 # substitute
#  ==> fun offset : 3 App type:O 
#  ==> arg offset : 4 App type:O 
#  ==> x offset : 7 self type:M 
#  ==> e offset : 6 self type:M 
#  -> curr off 24
# for e method 
	lw	$a0 24($fp) # substitute
	sw	$a0 0($sp) # substitute
	addiu	$sp $sp -4 # substitute
#  ==> fun offset : 3 App type:O 
#  ==> arg offset : 4 App type:O 
#  ==> x offset : 7 self type:M 
#  ==> e offset : 6 self type:M 
#  -> curr off 12
# for fun self 
	lw	$a0 12($s0) # substitute
	bne	$a0 $zero label27 # substitute
	la	$a0 str_const0 # substitute
	li	$t1 1 # substitute
	jal	_dispatch_abort # substitute
label27: # substitute
	lw	$t1 8($a0) # substitute
	lw	$t1 36($t1) # substitute
	jalr	$t1 # substitute
	sw	$a0 12($fp) # substitute
 # let code for name new_arg
#  ==> fun offset : 3 App type:O 
#  ==> arg offset : 4 App type:O 
#  ==> x offset : 7 self type:M 
#  ==> e offset : 6 self type:M 
#  ==> new_fun offset : 3 App type:M 
#  -> curr off 28
# for x method 
	lw	$a0 28($fp) # substitute
	sw	$a0 0($sp) # substitute
	addiu	$sp $sp -4 # substitute
#  ==> fun offset : 3 App type:O 
#  ==> arg offset : 4 App type:O 
#  ==> x offset : 7 self type:M 
#  ==> e offset : 6 self type:M 
#  ==> new_fun offset : 3 App type:M 
#  -> curr off 24
# for e method 
	lw	$a0 24($fp) # substitute
	sw	$a0 0($sp) # substitute
	addiu	$sp $sp -4 # substitute
#  ==> fun offset : 3 App type:O 
#  ==> arg offset : 4 App type:O 
#  ==> x offset : 7 self type:M 
#  ==> e offset : 6 self type:M 
#  ==> new_fun offset : 3 App type:M 
#  -> curr off 16
# for arg self 
	lw	$a0 16($s0) # substitute
	bne	$a0 $zero label28 # substitute
	la	$a0 str_const0 # substitute
	li	$t1 1 # substitute
	jal	_dispatch_abort # substitute
label28: # substitute
	lw	$t1 8($a0) # substitute
	lw	$t1 36($t1) # substitute
	jalr	$t1 # substitute
	sw	$a0 16($fp) # substitute
 # let code for name new_app
	la	$a0 App_protObj # substitute
	jal	Object.copy # substitute
	jal	App_init
	sw	$a0 20($fp) # substitute
#  ==> fun offset : 3 App type:O 
#  ==> arg offset : 4 App type:O 
#  ==> x offset : 7 self type:M 
#  ==> e offset : 6 self type:M 
#  ==> new_fun offset : 3 App type:M 
#  ==> new_arg offset : 4 App type:M 
#  ==> new_app offset : 5 App type:M 
#  -> curr off 12
# for new_fun method 
	lw	$a0 12($fp) # substitute
	sw	$a0 0($sp) # substitute
	addiu	$sp $sp -4 # substitute
#  ==> fun offset : 3 App type:O 
#  ==> arg offset : 4 App type:O 
#  ==> x offset : 7 self type:M 
#  ==> e offset : 6 self type:M 
#  ==> new_fun offset : 3 App type:M 
#  ==> new_arg offset : 4 App type:M 
#  ==> new_app offset : 5 App type:M 
#  -> curr off 16
# for new_arg method 
	lw	$a0 16($fp) # substitute
	sw	$a0 0($sp) # substitute
	addiu	$sp $sp -4 # substitute
#  ==> fun offset : 3 App type:O 
#  ==> arg offset : 4 App type:O 
#  ==> x offset : 7 self type:M 
#  ==> e offset : 6 self type:M 
#  ==> new_fun offset : 3 App type:M 
#  ==> new_arg offset : 4 App type:M 
#  ==> new_app offset : 5 App type:M 
#  -> curr off 20
# for new_app method 
	lw	$a0 20($fp) # substitute
	bne	$a0 $zero label29 # substitute
	la	$a0 str_const0 # substitute
	li	$t1 1 # substitute
	jal	_dispatch_abort # substitute
label29: # substitute
	lw	$t1 8($a0) # substitute
	lw	$t1 44($t1) # substitute
	jalr	$t1 # substitute
	lw	$fp 12($sp) # substitute
	lw	$s0 8($sp) # substitute
	lw	$ra 4($sp) # substitute
	addiu	$sp $sp 32 # substitute
	jr	$ra	 # substitute
App.gen_code:
	addiu	$sp $sp -12 # gen_code
	sw	$fp 12($sp) # gen_code
	sw	$s0 8($sp) # gen_code
	sw	$ra 4($sp) # gen_code
	addiu	$fp $sp 4 # gen_code
	move	$s0 $a0 # gen_code
 # formal env
 # formal closures
	lw	$fp 12($sp) # gen_code
	lw	$s0 8($sp) # gen_code
	lw	$ra 4($sp) # gen_code
	addiu	$sp $sp 20 # gen_code
	jr	$ra	 # gen_code
Lambda.init:
	addiu	$sp $sp -12 # init
	sw	$fp 12($sp) # init
	sw	$s0 8($sp) # init
	sw	$ra 4($sp) # init
	addiu	$fp $sp 4 # init
	move	$s0 $a0 # init
 # formal a
 # formal b
	lw	$fp 12($sp) # init
	lw	$s0 8($sp) # init
	lw	$ra 4($sp) # init
	addiu	$sp $sp 20 # init
	jr	$ra	 # init
Lambda.print_self:
	addiu	$sp $sp -12 # print_self
	sw	$fp 12($sp) # print_self
	sw	$s0 8($sp) # print_self
	sw	$ra 4($sp) # print_self
	addiu	$fp $sp 4 # print_self
	move	$s0 $a0 # print_self
	lw	$fp 12($sp) # print_self
	lw	$s0 8($sp) # print_self
	lw	$ra 4($sp) # print_self
	addiu	$sp $sp 12 # print_self
	jr	$ra	 # print_self
Lambda.beta:
	addiu	$sp $sp -12 # beta
	sw	$fp 12($sp) # beta
	sw	$s0 8($sp) # beta
	sw	$ra 4($sp) # beta
	addiu	$fp $sp 4 # beta
	move	$s0 $a0 # beta
# for self SELF 
	move	$a0 $s0 # beta
	lw	$fp 12($sp) # beta
	lw	$s0 8($sp) # beta
	lw	$ra 4($sp) # beta
	addiu	$sp $sp 12 # beta
	jr	$ra	 # beta
Lambda.apply:
	addiu	$sp $sp -12 # apply
	sw	$fp 12($sp) # apply
	sw	$s0 8($sp) # apply
	sw	$ra 4($sp) # apply
	addiu	$fp $sp 4 # apply
	move	$s0 $a0 # apply
 # formal actual
#  ==> arg offset : 3 Lambda type:O 
#  ==> body offset : 4 Lambda type:O 
#  ==> actual offset : 3 self type:M 
#  -> curr off 12
# for arg self 
	lw	$a0 12($s0) # apply
	sw	$a0 0($sp) # apply
	addiu	$sp $sp -4 # apply
#  ==> arg offset : 3 Lambda type:O 
#  ==> body offset : 4 Lambda type:O 
#  ==> actual offset : 3 self type:M 
#  -> curr off 12
# for actual method 
	lw	$a0 12($fp) # apply
	sw	$a0 0($sp) # apply
	addiu	$sp $sp -4 # apply
#  ==> arg offset : 3 Lambda type:O 
#  ==> body offset : 4 Lambda type:O 
#  ==> actual offset : 3 self type:M 
#  -> curr off 16
# for body self 
	lw	$a0 16($s0) # apply
	bne	$a0 $zero label30 # apply
	la	$a0 str_const0 # apply
	li	$t1 1 # apply
	jal	_dispatch_abort # apply
label30: # apply
	lw	$t1 8($a0) # apply
	lw	$t1 36($t1) # apply
	jalr	$t1 # apply
	lw	$fp 12($sp) # apply
	lw	$s0 8($sp) # apply
	lw	$ra 4($sp) # apply
	addiu	$sp $sp 16 # apply
	jr	$ra	 # apply
Lambda.substitute:
	addiu	$sp $sp -20 # substitute
	sw	$fp 12($sp) # substitute
	sw	$s0 8($sp) # substitute
	sw	$ra 4($sp) # substitute
	addiu	$fp $sp 4 # substitute
	move	$s0 $a0 # substitute
 # formal x
 # formal e
	lw	$fp 12($sp) # substitute
	lw	$s0 8($sp) # substitute
	lw	$ra 4($sp) # substitute
	addiu	$sp $sp 28 # substitute
	jr	$ra	 # substitute
Lambda.gen_code:
	addiu	$sp $sp -12 # gen_code
	sw	$fp 12($sp) # gen_code
	sw	$s0 8($sp) # gen_code
	sw	$ra 4($sp) # gen_code
	addiu	$fp $sp 4 # gen_code
	move	$s0 $a0 # gen_code
 # formal env
 # formal closures
	lw	$fp 12($sp) # gen_code
	lw	$s0 8($sp) # gen_code
	lw	$ra 4($sp) # gen_code
	addiu	$sp $sp 20 # gen_code
	jr	$ra	 # gen_code
Lambda.gen_closure_code:
	addiu	$sp $sp -12 # gen_closure_code
	sw	$fp 12($sp) # gen_closure_code
	sw	$s0 8($sp) # gen_closure_code
	sw	$ra 4($sp) # gen_closure_code
	addiu	$fp $sp 4 # gen_closure_code
	move	$s0 $a0 # gen_closure_code
 # formal n
 # formal env
 # formal closures
	lw	$fp 12($sp) # gen_closure_code
	lw	$s0 8($sp) # gen_closure_code
	lw	$ra 4($sp) # gen_closure_code
	addiu	$sp $sp 24 # gen_closure_code
	jr	$ra	 # gen_closure_code
Variable.init:
	addiu	$sp $sp -12 # init
	sw	$fp 12($sp) # init
	sw	$s0 8($sp) # init
	sw	$ra 4($sp) # init
	addiu	$fp $sp 4 # init
	move	$s0 $a0 # init
 # formal n
	lw	$fp 12($sp) # init
	lw	$s0 8($sp) # init
	lw	$ra 4($sp) # init
	addiu	$sp $sp 16 # init
	jr	$ra	 # init
Variable.print_self:
	addiu	$sp $sp -12 # print_self
	sw	$fp 12($sp) # print_self
	sw	$s0 8($sp) # print_self
	sw	$ra 4($sp) # print_self
	addiu	$fp $sp 4 # print_self
	move	$s0 $a0 # print_self
#  ==> name offset : 3 Variable type:O 
#  -> curr off 12
# for name self 
	lw	$a0 12($s0) # print_self
	sw	$a0 0($sp) # print_self
	addiu	$sp $sp -4 # print_self
# for self SELF 
	move	$a0 $s0 # print_self
	bne	$a0 $zero label31 # print_self
	la	$a0 str_const0 # print_self
	li	$t1 1 # print_self
	jal	_dispatch_abort # print_self
label31: # print_self
	lw	$t1 8($a0) # print_self
	lw	$t1 12($t1) # print_self
	jalr	$t1 # print_self
	lw	$fp 12($sp) # print_self
	lw	$s0 8($sp) # print_self
	lw	$ra 4($sp) # print_self
	addiu	$sp $sp 12 # print_self
	jr	$ra	 # print_self
Variable.beta:
	addiu	$sp $sp -12 # beta
	sw	$fp 12($sp) # beta
	sw	$s0 8($sp) # beta
	sw	$ra 4($sp) # beta
	addiu	$fp $sp 4 # beta
	move	$s0 $a0 # beta
# for self SELF 
	move	$a0 $s0 # beta
	lw	$fp 12($sp) # beta
	lw	$s0 8($sp) # beta
	lw	$ra 4($sp) # beta
	addiu	$sp $sp 12 # beta
	jr	$ra	 # beta
Variable.substitute:
	addiu	$sp $sp -16 # substitute
	sw	$fp 12($sp) # substitute
	sw	$s0 8($sp) # substitute
	sw	$ra 4($sp) # substitute
	addiu	$fp $sp 4 # substitute
	move	$s0 $a0 # substitute
 # formal x
 # formal e
	lw	$fp 12($sp) # substitute
	lw	$s0 8($sp) # substitute
	lw	$ra 4($sp) # substitute
	addiu	$sp $sp 24 # substitute
	jr	$ra	 # substitute
Variable.gen_code:
	addiu	$sp $sp -20 # gen_code
	sw	$fp 12($sp) # gen_code
	sw	$s0 8($sp) # gen_code
	sw	$ra 4($sp) # gen_code
	addiu	$fp $sp 4 # gen_code
	move	$s0 $a0 # gen_code
 # formal env
 # formal closures
 # let code for name cur_env
#  ==> name offset : 3 Variable type:O 
#  ==> env offset : 6 self type:M 
#  ==> closures offset : 5 self type:M 
#  -> curr off 24
# for env method 
	lw	$a0 24($fp) # gen_code
	sw	$a0 12($fp) # gen_code
	lw	$fp 12($sp) # gen_code
	lw	$s0 8($sp) # gen_code
	lw	$ra 4($sp) # gen_code
	addiu	$sp $sp 28 # gen_code
	jr	$ra	 # gen_code
Expr.print_self:
	addiu	$sp $sp -12 # print_self
	sw	$fp 12($sp) # print_self
	sw	$s0 8($sp) # print_self
	sw	$ra 4($sp) # print_self
	addiu	$fp $sp 4 # print_self
	move	$s0 $a0 # print_self
	lw	$fp 12($sp) # print_self
	lw	$s0 8($sp) # print_self
	lw	$ra 4($sp) # print_self
	addiu	$sp $sp 12 # print_self
	jr	$ra	 # print_self
Expr.beta:
	addiu	$sp $sp -12 # beta
	sw	$fp 12($sp) # beta
	sw	$s0 8($sp) # beta
	sw	$ra 4($sp) # beta
	addiu	$fp $sp 4 # beta
	move	$s0 $a0 # beta
	lw	$fp 12($sp) # beta
	lw	$s0 8($sp) # beta
	lw	$ra 4($sp) # beta
	addiu	$sp $sp 12 # beta
	jr	$ra	 # beta
Expr.substitute:
	addiu	$sp $sp -12 # substitute
	sw	$fp 12($sp) # substitute
	sw	$s0 8($sp) # substitute
	sw	$ra 4($sp) # substitute
	addiu	$fp $sp 4 # substitute
	move	$s0 $a0 # substitute
 # formal x
 # formal e
	lw	$fp 12($sp) # substitute
	lw	$s0 8($sp) # substitute
	lw	$ra 4($sp) # substitute
	addiu	$sp $sp 20 # substitute
	jr	$ra	 # substitute
Expr.gen_code:
	addiu	$sp $sp -12 # gen_code
	sw	$fp 12($sp) # gen_code
	sw	$s0 8($sp) # gen_code
	sw	$ra 4($sp) # gen_code
	addiu	$fp $sp 4 # gen_code
	move	$s0 $a0 # gen_code
 # formal env
 # formal closures
	lw	$fp 12($sp) # gen_code
	lw	$s0 8($sp) # gen_code
	lw	$ra 4($sp) # gen_code
	addiu	$sp $sp 20 # gen_code
	jr	$ra	 # gen_code
LambdaListRef.isNil:
	addiu	$sp $sp -12 # isNil
	sw	$fp 12($sp) # isNil
	sw	$s0 8($sp) # isNil
	sw	$ra 4($sp) # isNil
	addiu	$fp $sp 4 # isNil
	move	$s0 $a0 # isNil
#  ==> nextNum offset : 3 LambdaListRef type:O 
#  ==> l offset : 4 LambdaListRef type:O 
#  -> curr off 16
# for l self 
	lw	$a0 16($s0) # isNil
	bne	$a0 $zero label32 # isNil
	la	$a0 str_const0 # isNil
	li	$t1 1 # isNil
	jal	_dispatch_abort # isNil
label32: # isNil
	lw	$t1 8($a0) # isNil
	lw	$t1 12($t1) # isNil
	jalr	$t1 # isNil
	lw	$fp 12($sp) # isNil
	lw	$s0 8($sp) # isNil
	lw	$ra 4($sp) # isNil
	addiu	$sp $sp 12 # isNil
	jr	$ra	 # isNil
LambdaListRef.headE:
	addiu	$sp $sp -12 # headE
	sw	$fp 12($sp) # headE
	sw	$s0 8($sp) # headE
	sw	$ra 4($sp) # headE
	addiu	$fp $sp 4 # headE
	move	$s0 $a0 # headE
#  ==> nextNum offset : 3 LambdaListRef type:O 
#  ==> l offset : 4 LambdaListRef type:O 
#  -> curr off 16
# for l self 
	lw	$a0 16($s0) # headE
	bne	$a0 $zero label33 # headE
	la	$a0 str_const0 # headE
	li	$t1 1 # headE
	jal	_dispatch_abort # headE
label33: # headE
	lw	$t1 8($a0) # headE
	lw	$t1 16($t1) # headE
	jalr	$t1 # headE
	lw	$fp 12($sp) # headE
	lw	$s0 8($sp) # headE
	lw	$ra 4($sp) # headE
	addiu	$sp $sp 12 # headE
	jr	$ra	 # headE
LambdaListRef.headC:
	addiu	$sp $sp -12 # headC
	sw	$fp 12($sp) # headC
	sw	$s0 8($sp) # headC
	sw	$ra 4($sp) # headC
	addiu	$fp $sp 4 # headC
	move	$s0 $a0 # headC
#  ==> nextNum offset : 3 LambdaListRef type:O 
#  ==> l offset : 4 LambdaListRef type:O 
#  -> curr off 16
# for l self 
	lw	$a0 16($s0) # headC
	bne	$a0 $zero label34 # headC
	la	$a0 str_const0 # headC
	li	$t1 1 # headC
	jal	_dispatch_abort # headC
label34: # headC
	lw	$t1 8($a0) # headC
	lw	$t1 20($t1) # headC
	jalr	$t1 # headC
	lw	$fp 12($sp) # headC
	lw	$s0 8($sp) # headC
	lw	$ra 4($sp) # headC
	addiu	$sp $sp 12 # headC
	jr	$ra	 # headC
LambdaListRef.headN:
	addiu	$sp $sp -12 # headN
	sw	$fp 12($sp) # headN
	sw	$s0 8($sp) # headN
	sw	$ra 4($sp) # headN
	addiu	$fp $sp 4 # headN
	move	$s0 $a0 # headN
#  ==> nextNum offset : 3 LambdaListRef type:O 
#  ==> l offset : 4 LambdaListRef type:O 
#  -> curr off 16
# for l self 
	lw	$a0 16($s0) # headN
	bne	$a0 $zero label35 # headN
	la	$a0 str_const0 # headN
	li	$t1 1 # headN
	jal	_dispatch_abort # headN
label35: # headN
	lw	$t1 8($a0) # headN
	lw	$t1 24($t1) # headN
	jalr	$t1 # headN
	lw	$fp 12($sp) # headN
	lw	$s0 8($sp) # headN
	lw	$ra 4($sp) # headN
	addiu	$sp $sp 12 # headN
	jr	$ra	 # headN
LambdaListRef.reset:
	addiu	$sp $sp -16 # reset
	sw	$fp 12($sp) # reset
	sw	$s0 8($sp) # reset
	sw	$ra 4($sp) # reset
	addiu	$fp $sp 4 # reset
	move	$s0 $a0 # reset
	lw	$fp 12($sp) # reset
	lw	$s0 8($sp) # reset
	lw	$ra 4($sp) # reset
	addiu	$sp $sp 16 # reset
	jr	$ra	 # reset
LambdaListRef.add:
	addiu	$sp $sp -16 # add
	sw	$fp 12($sp) # add
	sw	$s0 8($sp) # add
	sw	$ra 4($sp) # add
	addiu	$fp $sp 4 # add
	move	$s0 $a0 # add
 # formal env
 # formal c
	lw	$fp 12($sp) # add
	lw	$s0 8($sp) # add
	lw	$ra 4($sp) # add
	addiu	$sp $sp 24 # add
	jr	$ra	 # add
LambdaListRef.removeHead:
	addiu	$sp $sp -12 # removeHead
	sw	$fp 12($sp) # removeHead
	sw	$s0 8($sp) # removeHead
	sw	$ra 4($sp) # removeHead
	addiu	$fp $sp 4 # removeHead
	move	$s0 $a0 # removeHead
	lw	$fp 12($sp) # removeHead
	lw	$s0 8($sp) # removeHead
	lw	$ra 4($sp) # removeHead
	addiu	$sp $sp 12 # removeHead
	jr	$ra	 # removeHead
LambdaListNE.isNil:
	addiu	$sp $sp -12 # isNil
	sw	$fp 12($sp) # isNil
	sw	$s0 8($sp) # isNil
	sw	$ra 4($sp) # isNil
	addiu	$fp $sp 4 # isNil
	move	$s0 $a0 # isNil
	la	$a0 bool_const0 # isNil
	lw	$fp 12($sp) # isNil
	lw	$s0 8($sp) # isNil
	lw	$ra 4($sp) # isNil
	addiu	$sp $sp 12 # isNil
	jr	$ra	 # isNil
LambdaListNE.headE:
	addiu	$sp $sp -12 # headE
	sw	$fp 12($sp) # headE
	sw	$s0 8($sp) # headE
	sw	$ra 4($sp) # headE
	addiu	$fp $sp 4 # headE
	move	$s0 $a0 # headE
#  ==> lam offset : 3 LambdaListNE type:O 
#  ==> num offset : 4 LambdaListNE type:O 
#  ==> env offset : 5 LambdaListNE type:O 
#  ==> rest offset : 6 LambdaListNE type:O 
#  -> curr off 20
# for env self 
	lw	$a0 20($s0) # headE
	lw	$fp 12($sp) # headE
	lw	$s0 8($sp) # headE
	lw	$ra 4($sp) # headE
	addiu	$sp $sp 12 # headE
	jr	$ra	 # headE
LambdaListNE.headC:
	addiu	$sp $sp -12 # headC
	sw	$fp 12($sp) # headC
	sw	$s0 8($sp) # headC
	sw	$ra 4($sp) # headC
	addiu	$fp $sp 4 # headC
	move	$s0 $a0 # headC
#  ==> lam offset : 3 LambdaListNE type:O 
#  ==> num offset : 4 LambdaListNE type:O 
#  ==> env offset : 5 LambdaListNE type:O 
#  ==> rest offset : 6 LambdaListNE type:O 
#  -> curr off 12
# for lam self 
	lw	$a0 12($s0) # headC
	lw	$fp 12($sp) # headC
	lw	$s0 8($sp) # headC
	lw	$ra 4($sp) # headC
	addiu	$sp $sp 12 # headC
	jr	$ra	 # headC
LambdaListNE.headN:
	addiu	$sp $sp -12 # headN
	sw	$fp 12($sp) # headN
	sw	$s0 8($sp) # headN
	sw	$ra 4($sp) # headN
	addiu	$fp $sp 4 # headN
	move	$s0 $a0 # headN
#  ==> lam offset : 3 LambdaListNE type:O 
#  ==> num offset : 4 LambdaListNE type:O 
#  ==> env offset : 5 LambdaListNE type:O 
#  ==> rest offset : 6 LambdaListNE type:O 
#  -> curr off 16
# for num self 
	lw	$a0 16($s0) # headN
	lw	$fp 12($sp) # headN
	lw	$s0 8($sp) # headN
	lw	$ra 4($sp) # headN
	addiu	$sp $sp 12 # headN
	jr	$ra	 # headN
LambdaListNE.tail:
	addiu	$sp $sp -12 # tail
	sw	$fp 12($sp) # tail
	sw	$s0 8($sp) # tail
	sw	$ra 4($sp) # tail
	addiu	$fp $sp 4 # tail
	move	$s0 $a0 # tail
#  ==> lam offset : 3 LambdaListNE type:O 
#  ==> num offset : 4 LambdaListNE type:O 
#  ==> env offset : 5 LambdaListNE type:O 
#  ==> rest offset : 6 LambdaListNE type:O 
#  -> curr off 24
# for rest self 
	lw	$a0 24($s0) # tail
	lw	$fp 12($sp) # tail
	lw	$s0 8($sp) # tail
	lw	$ra 4($sp) # tail
	addiu	$sp $sp 12 # tail
	jr	$ra	 # tail
LambdaListNE.init:
	addiu	$sp $sp -12 # init
	sw	$fp 12($sp) # init
	sw	$s0 8($sp) # init
	sw	$ra 4($sp) # init
	addiu	$fp $sp 4 # init
	move	$s0 $a0 # init
 # formal e
 # formal l
 # formal n
 # formal r
	lw	$fp 12($sp) # init
	lw	$s0 8($sp) # init
	lw	$ra 4($sp) # init
	addiu	$sp $sp 28 # init
	jr	$ra	 # init
LambdaList.isNil:
	addiu	$sp $sp -12 # isNil
	sw	$fp 12($sp) # isNil
	sw	$s0 8($sp) # isNil
	sw	$ra 4($sp) # isNil
	addiu	$fp $sp 4 # isNil
	move	$s0 $a0 # isNil
	la	$a0 bool_const1 # isNil
	lw	$fp 12($sp) # isNil
	lw	$s0 8($sp) # isNil
	lw	$ra 4($sp) # isNil
	addiu	$sp $sp 12 # isNil
	jr	$ra	 # isNil
LambdaList.headE:
	addiu	$sp $sp -16 # headE
	sw	$fp 12($sp) # headE
	sw	$s0 8($sp) # headE
	sw	$ra 4($sp) # headE
	addiu	$fp $sp 4 # headE
	move	$s0 $a0 # headE
	lw	$fp 12($sp) # headE
	lw	$s0 8($sp) # headE
	lw	$ra 4($sp) # headE
	addiu	$sp $sp 16 # headE
	jr	$ra	 # headE
LambdaList.headC:
	addiu	$sp $sp -16 # headC
	sw	$fp 12($sp) # headC
	sw	$s0 8($sp) # headC
	sw	$ra 4($sp) # headC
	addiu	$fp $sp 4 # headC
	move	$s0 $a0 # headC
	lw	$fp 12($sp) # headC
	lw	$s0 8($sp) # headC
	lw	$ra 4($sp) # headC
	addiu	$sp $sp 16 # headC
	jr	$ra	 # headC
LambdaList.headN:
	addiu	$sp $sp -12 # headN
	sw	$fp 12($sp) # headN
	sw	$s0 8($sp) # headN
	sw	$ra 4($sp) # headN
	addiu	$fp $sp 4 # headN
	move	$s0 $a0 # headN
	lw	$fp 12($sp) # headN
	lw	$s0 8($sp) # headN
	lw	$ra 4($sp) # headN
	addiu	$sp $sp 12 # headN
	jr	$ra	 # headN
LambdaList.tail:
	addiu	$sp $sp -16 # tail
	sw	$fp 12($sp) # tail
	sw	$s0 8($sp) # tail
	sw	$ra 4($sp) # tail
	addiu	$fp $sp 4 # tail
	move	$s0 $a0 # tail
	lw	$fp 12($sp) # tail
	lw	$s0 8($sp) # tail
	lw	$ra 4($sp) # tail
	addiu	$sp $sp 16 # tail
	jr	$ra	 # tail
LambdaList.add:
	addiu	$sp $sp -16 # add
	sw	$fp 12($sp) # add
	sw	$s0 8($sp) # add
	sw	$ra 4($sp) # add
	addiu	$fp $sp 4 # add
	move	$s0 $a0 # add
 # formal e
 # formal x
 # formal n
#  ==> e offset : 6 self type:M 
#  ==> x offset : 5 self type:M 
#  ==> n offset : 4 self type:M 
#  -> curr off 24
# for e method 
	lw	$a0 24($fp) # add
	sw	$a0 0($sp) # add
	addiu	$sp $sp -4 # add
#  ==> e offset : 6 self type:M 
#  ==> x offset : 5 self type:M 
#  ==> n offset : 4 self type:M 
#  -> curr off 20
# for x method 
	lw	$a0 20($fp) # add
	sw	$a0 0($sp) # add
	addiu	$sp $sp -4 # add
#  ==> e offset : 6 self type:M 
#  ==> x offset : 5 self type:M 
#  ==> n offset : 4 self type:M 
#  -> curr off 16
# for n method 
	lw	$a0 16($fp) # add
	sw	$a0 0($sp) # add
	addiu	$sp $sp -4 # add
# for self SELF 
	move	$a0 $s0 # add
	sw	$a0 0($sp) # add
	addiu	$sp $sp -4 # add
	la	$a0 LambdaListNE_protObj # add
	jal	Object.copy # add
	jal	LambdaListNE_init
	bne	$a0 $zero label36 # add
	la	$a0 str_const0 # add
	li	$t1 1 # add
	jal	_dispatch_abort # add
label36: # add
	lw	$t1 8($a0) # add
	lw	$t1 36($t1) # add
	jalr	$t1 # add
	lw	$fp 12($sp) # add
	lw	$s0 8($sp) # add
	lw	$ra 4($sp) # add
	addiu	$sp $sp 28 # add
	jr	$ra	 # add
VarListNE.isNil:
	addiu	$sp $sp -12 # isNil
	sw	$fp 12($sp) # isNil
	sw	$s0 8($sp) # isNil
	sw	$ra 4($sp) # isNil
	addiu	$fp $sp 4 # isNil
	move	$s0 $a0 # isNil
	la	$a0 bool_const0 # isNil
	lw	$fp 12($sp) # isNil
	lw	$s0 8($sp) # isNil
	lw	$ra 4($sp) # isNil
	addiu	$sp $sp 12 # isNil
	jr	$ra	 # isNil
VarListNE.head:
	addiu	$sp $sp -12 # head
	sw	$fp 12($sp) # head
	sw	$s0 8($sp) # head
	sw	$ra 4($sp) # head
	addiu	$fp $sp 4 # head
	move	$s0 $a0 # head
#  ==> x offset : 3 VarListNE type:O 
#  ==> rest offset : 4 VarListNE type:O 
#  -> curr off 12
# for x self 
	lw	$a0 12($s0) # head
	lw	$fp 12($sp) # head
	lw	$s0 8($sp) # head
	lw	$ra 4($sp) # head
	addiu	$sp $sp 12 # head
	jr	$ra	 # head
VarListNE.tail:
	addiu	$sp $sp -12 # tail
	sw	$fp 12($sp) # tail
	sw	$s0 8($sp) # tail
	sw	$ra 4($sp) # tail
	addiu	$fp $sp 4 # tail
	move	$s0 $a0 # tail
#  ==> x offset : 3 VarListNE type:O 
#  ==> rest offset : 4 VarListNE type:O 
#  -> curr off 16
# for rest self 
	lw	$a0 16($s0) # tail
	lw	$fp 12($sp) # tail
	lw	$s0 8($sp) # tail
	lw	$ra 4($sp) # tail
	addiu	$sp $sp 12 # tail
	jr	$ra	 # tail
VarListNE.init:
	addiu	$sp $sp -12 # init
	sw	$fp 12($sp) # init
	sw	$s0 8($sp) # init
	sw	$ra 4($sp) # init
	addiu	$fp $sp 4 # init
	move	$s0 $a0 # init
 # formal y
 # formal r
	lw	$fp 12($sp) # init
	lw	$s0 8($sp) # init
	lw	$ra 4($sp) # init
	addiu	$sp $sp 20 # init
	jr	$ra	 # init
VarListNE.print:
	addiu	$sp $sp -12 # print
	sw	$fp 12($sp) # print
	sw	$s0 8($sp) # print
	sw	$ra 4($sp) # print
	addiu	$fp $sp 4 # print
	move	$s0 $a0 # print
	lw	$fp 12($sp) # print
	lw	$s0 8($sp) # print
	lw	$ra 4($sp) # print
	addiu	$sp $sp 12 # print
	jr	$ra	 # print
VarList.isNil:
	addiu	$sp $sp -12 # isNil
	sw	$fp 12($sp) # isNil
	sw	$s0 8($sp) # isNil
	sw	$ra 4($sp) # isNil
	addiu	$fp $sp 4 # isNil
	move	$s0 $a0 # isNil
	la	$a0 bool_const1 # isNil
	lw	$fp 12($sp) # isNil
	lw	$s0 8($sp) # isNil
	lw	$ra 4($sp) # isNil
	addiu	$sp $sp 12 # isNil
	jr	$ra	 # isNil
VarList.head:
	addiu	$sp $sp -16 # head
	sw	$fp 12($sp) # head
	sw	$s0 8($sp) # head
	sw	$ra 4($sp) # head
	addiu	$fp $sp 4 # head
	move	$s0 $a0 # head
	lw	$fp 12($sp) # head
	lw	$s0 8($sp) # head
	lw	$ra 4($sp) # head
	addiu	$sp $sp 16 # head
	jr	$ra	 # head
VarList.tail:
	addiu	$sp $sp -16 # tail
	sw	$fp 12($sp) # tail
	sw	$s0 8($sp) # tail
	sw	$ra 4($sp) # tail
	addiu	$fp $sp 4 # tail
	move	$s0 $a0 # tail
	lw	$fp 12($sp) # tail
	lw	$s0 8($sp) # tail
	lw	$ra 4($sp) # tail
	addiu	$sp $sp 16 # tail
	jr	$ra	 # tail
VarList.add:
	addiu	$sp $sp -16 # add
	sw	$fp 12($sp) # add
	sw	$s0 8($sp) # add
	sw	$ra 4($sp) # add
	addiu	$fp $sp 4 # add
	move	$s0 $a0 # add
 # formal x
#  ==> x offset : 4 self type:M 
#  -> curr off 16
# for x method 
	lw	$a0 16($fp) # add
	sw	$a0 0($sp) # add
	addiu	$sp $sp -4 # add
# for self SELF 
	move	$a0 $s0 # add
	sw	$a0 0($sp) # add
	addiu	$sp $sp -4 # add
	la	$a0 VarListNE_protObj # add
	jal	Object.copy # add
	jal	VarListNE_init
	bne	$a0 $zero label37 # add
	la	$a0 str_const0 # add
	li	$t1 1 # add
	jal	_dispatch_abort # add
label37: # add
	lw	$t1 8($a0) # add
	lw	$t1 48($t1) # add
	jalr	$t1 # add
	lw	$fp 12($sp) # add
	lw	$s0 8($sp) # add
	lw	$ra 4($sp) # add
	addiu	$sp $sp 20 # add
	jr	$ra	 # add
VarList.print:
	addiu	$sp $sp -12 # print
	sw	$fp 12($sp) # print
	sw	$s0 8($sp) # print
	sw	$ra 4($sp) # print
	addiu	$fp $sp 4 # print
	move	$s0 $a0 # print
	la	$a0 str_const1 # print
	sw	$a0 0($sp) # print
	addiu	$sp $sp -4 # print
# for self SELF 
	move	$a0 $s0 # print
	bne	$a0 $zero label38 # print
	la	$a0 str_const0 # print
	li	$t1 1 # print
	jal	_dispatch_abort # print
label38: # print
	lw	$t1 8($a0) # print
	lw	$t1 12($t1) # print
	jalr	$t1 # print
	lw	$fp 12($sp) # print
	lw	$s0 8($sp) # print
	lw	$ra 4($sp) # print
	addiu	$sp $sp 12 # print
	jr	$ra	 # print

# end of generated code
